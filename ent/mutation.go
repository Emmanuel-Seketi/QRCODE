// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qr_backend/ent/filereference"
	"qr_backend/ent/predicate"
	"qr_backend/ent/qrcode"
	"qr_backend/ent/qrcodeanalytics"
	"qr_backend/ent/qrcodegroup"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFileReference   = "FileReference"
	TypeQRCode          = "QRCode"
	TypeQRCodeAnalytics = "QRCodeAnalytics"
	TypeQRCodeGroup     = "QRCodeGroup"
)

// FileReferenceMutation represents an operation that mutates the FileReference nodes in the graph.
type FileReferenceMutation struct {
	config
	op             Op
	typ            string
	id             *int
	filename       *string
	url            *string
	size           *int64
	addsize        *int64
	_type          *string
	clearedFields  map[string]struct{}
	qr_code        *int
	clearedqr_code bool
	done           bool
	oldValue       func(context.Context) (*FileReference, error)
	predicates     []predicate.FileReference
}

var _ ent.Mutation = (*FileReferenceMutation)(nil)

// filereferenceOption allows management of the mutation configuration using functional options.
type filereferenceOption func(*FileReferenceMutation)

// newFileReferenceMutation creates new mutation for the FileReference entity.
func newFileReferenceMutation(c config, op Op, opts ...filereferenceOption) *FileReferenceMutation {
	m := &FileReferenceMutation{
		config:        c,
		op:            op,
		typ:           TypeFileReference,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileReferenceID sets the ID field of the mutation.
func withFileReferenceID(id int) filereferenceOption {
	return func(m *FileReferenceMutation) {
		var (
			err   error
			once  sync.Once
			value *FileReference
		)
		m.oldValue = func(ctx context.Context) (*FileReference, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileReference.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileReference sets the old FileReference of the mutation.
func withFileReference(node *FileReference) filereferenceOption {
	return func(m *FileReferenceMutation) {
		m.oldValue = func(context.Context) (*FileReference, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileReferenceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileReferenceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileReferenceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileReferenceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FileReference.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFilename sets the "filename" field.
func (m *FileReferenceMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *FileReferenceMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the FileReference entity.
// If the FileReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileReferenceMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *FileReferenceMutation) ResetFilename() {
	m.filename = nil
}

// SetURL sets the "url" field.
func (m *FileReferenceMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *FileReferenceMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the FileReference entity.
// If the FileReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileReferenceMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *FileReferenceMutation) ResetURL() {
	m.url = nil
}

// SetSize sets the "size" field.
func (m *FileReferenceMutation) SetSize(i int64) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FileReferenceMutation) Size() (r int64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the FileReference entity.
// If the FileReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileReferenceMutation) OldSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *FileReferenceMutation) AddSize(i int64) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FileReferenceMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FileReferenceMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetType sets the "type" field.
func (m *FileReferenceMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *FileReferenceMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the FileReference entity.
// If the FileReference object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileReferenceMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *FileReferenceMutation) ResetType() {
	m._type = nil
}

// SetQrCodeID sets the "qr_code" edge to the QRCode entity by id.
func (m *FileReferenceMutation) SetQrCodeID(id int) {
	m.qr_code = &id
}

// ClearQrCode clears the "qr_code" edge to the QRCode entity.
func (m *FileReferenceMutation) ClearQrCode() {
	m.clearedqr_code = true
}

// QrCodeCleared reports if the "qr_code" edge to the QRCode entity was cleared.
func (m *FileReferenceMutation) QrCodeCleared() bool {
	return m.clearedqr_code
}

// QrCodeID returns the "qr_code" edge ID in the mutation.
func (m *FileReferenceMutation) QrCodeID() (id int, exists bool) {
	if m.qr_code != nil {
		return *m.qr_code, true
	}
	return
}

// QrCodeIDs returns the "qr_code" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QrCodeID instead. It exists only for internal usage by the builders.
func (m *FileReferenceMutation) QrCodeIDs() (ids []int) {
	if id := m.qr_code; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQrCode resets all changes to the "qr_code" edge.
func (m *FileReferenceMutation) ResetQrCode() {
	m.qr_code = nil
	m.clearedqr_code = false
}

// Where appends a list predicates to the FileReferenceMutation builder.
func (m *FileReferenceMutation) Where(ps ...predicate.FileReference) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileReferenceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileReferenceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FileReference, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileReferenceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileReferenceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FileReference).
func (m *FileReferenceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileReferenceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.filename != nil {
		fields = append(fields, filereference.FieldFilename)
	}
	if m.url != nil {
		fields = append(fields, filereference.FieldURL)
	}
	if m.size != nil {
		fields = append(fields, filereference.FieldSize)
	}
	if m._type != nil {
		fields = append(fields, filereference.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileReferenceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case filereference.FieldFilename:
		return m.Filename()
	case filereference.FieldURL:
		return m.URL()
	case filereference.FieldSize:
		return m.Size()
	case filereference.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileReferenceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case filereference.FieldFilename:
		return m.OldFilename(ctx)
	case filereference.FieldURL:
		return m.OldURL(ctx)
	case filereference.FieldSize:
		return m.OldSize(ctx)
	case filereference.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown FileReference field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileReferenceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case filereference.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case filereference.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case filereference.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case filereference.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown FileReference field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileReferenceMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, filereference.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileReferenceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case filereference.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileReferenceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case filereference.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown FileReference numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileReferenceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileReferenceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileReferenceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FileReference nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileReferenceMutation) ResetField(name string) error {
	switch name {
	case filereference.FieldFilename:
		m.ResetFilename()
		return nil
	case filereference.FieldURL:
		m.ResetURL()
		return nil
	case filereference.FieldSize:
		m.ResetSize()
		return nil
	case filereference.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown FileReference field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileReferenceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.qr_code != nil {
		edges = append(edges, filereference.EdgeQrCode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileReferenceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case filereference.EdgeQrCode:
		if id := m.qr_code; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileReferenceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileReferenceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileReferenceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedqr_code {
		edges = append(edges, filereference.EdgeQrCode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileReferenceMutation) EdgeCleared(name string) bool {
	switch name {
	case filereference.EdgeQrCode:
		return m.clearedqr_code
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileReferenceMutation) ClearEdge(name string) error {
	switch name {
	case filereference.EdgeQrCode:
		m.ClearQrCode()
		return nil
	}
	return fmt.Errorf("unknown FileReference unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileReferenceMutation) ResetEdge(name string) error {
	switch name {
	case filereference.EdgeQrCode:
		m.ResetQrCode()
		return nil
	}
	return fmt.Errorf("unknown FileReference edge %s", name)
}

// QRCodeMutation represents an operation that mutates the QRCode nodes in the graph.
type QRCodeMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	_type                    *string
	title                    *string
	description              *string
	redirect_url             *string
	short_url                *string
	content                  *map[string]interface{}
	created_at               *time.Time
	updated_at               *time.Time
	expires_at               *time.Time
	analytics                *bool
	active                   *bool
	tags                     *[]string
	appendtags               []string
	design                   *map[string]interface{}
	clearedFields            map[string]struct{}
	file_refs                map[int]struct{}
	removedfile_refs         map[int]struct{}
	clearedfile_refs         bool
	group                    *int
	clearedgroup             bool
	analytics_records        map[int]struct{}
	removedanalytics_records map[int]struct{}
	clearedanalytics_records bool
	done                     bool
	oldValue                 func(context.Context) (*QRCode, error)
	predicates               []predicate.QRCode
}

var _ ent.Mutation = (*QRCodeMutation)(nil)

// qrcodeOption allows management of the mutation configuration using functional options.
type qrcodeOption func(*QRCodeMutation)

// newQRCodeMutation creates new mutation for the QRCode entity.
func newQRCodeMutation(c config, op Op, opts ...qrcodeOption) *QRCodeMutation {
	m := &QRCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeQRCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQRCodeID sets the ID field of the mutation.
func withQRCodeID(id int) qrcodeOption {
	return func(m *QRCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *QRCode
		)
		m.oldValue = func(ctx context.Context) (*QRCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QRCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQRCode sets the old QRCode of the mutation.
func withQRCode(node *QRCode) qrcodeOption {
	return func(m *QRCodeMutation) {
		m.oldValue = func(context.Context) (*QRCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QRCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QRCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QRCodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QRCodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QRCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *QRCodeMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *QRCodeMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *QRCodeMutation) ResetType() {
	m._type = nil
}

// SetTitle sets the "title" field.
func (m *QRCodeMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *QRCodeMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *QRCodeMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *QRCodeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *QRCodeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *QRCodeMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[qrcode.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *QRCodeMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[qrcode.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *QRCodeMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, qrcode.FieldDescription)
}

// SetRedirectURL sets the "redirect_url" field.
func (m *QRCodeMutation) SetRedirectURL(s string) {
	m.redirect_url = &s
}

// RedirectURL returns the value of the "redirect_url" field in the mutation.
func (m *QRCodeMutation) RedirectURL() (r string, exists bool) {
	v := m.redirect_url
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirectURL returns the old "redirect_url" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldRedirectURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirectURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirectURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirectURL: %w", err)
	}
	return oldValue.RedirectURL, nil
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (m *QRCodeMutation) ClearRedirectURL() {
	m.redirect_url = nil
	m.clearedFields[qrcode.FieldRedirectURL] = struct{}{}
}

// RedirectURLCleared returns if the "redirect_url" field was cleared in this mutation.
func (m *QRCodeMutation) RedirectURLCleared() bool {
	_, ok := m.clearedFields[qrcode.FieldRedirectURL]
	return ok
}

// ResetRedirectURL resets all changes to the "redirect_url" field.
func (m *QRCodeMutation) ResetRedirectURL() {
	m.redirect_url = nil
	delete(m.clearedFields, qrcode.FieldRedirectURL)
}

// SetShortURL sets the "short_url" field.
func (m *QRCodeMutation) SetShortURL(s string) {
	m.short_url = &s
}

// ShortURL returns the value of the "short_url" field in the mutation.
func (m *QRCodeMutation) ShortURL() (r string, exists bool) {
	v := m.short_url
	if v == nil {
		return
	}
	return *v, true
}

// OldShortURL returns the old "short_url" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldShortURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShortURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShortURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShortURL: %w", err)
	}
	return oldValue.ShortURL, nil
}

// ClearShortURL clears the value of the "short_url" field.
func (m *QRCodeMutation) ClearShortURL() {
	m.short_url = nil
	m.clearedFields[qrcode.FieldShortURL] = struct{}{}
}

// ShortURLCleared returns if the "short_url" field was cleared in this mutation.
func (m *QRCodeMutation) ShortURLCleared() bool {
	_, ok := m.clearedFields[qrcode.FieldShortURL]
	return ok
}

// ResetShortURL resets all changes to the "short_url" field.
func (m *QRCodeMutation) ResetShortURL() {
	m.short_url = nil
	delete(m.clearedFields, qrcode.FieldShortURL)
}

// SetContent sets the "content" field.
func (m *QRCodeMutation) SetContent(value map[string]interface{}) {
	m.content = &value
}

// Content returns the value of the "content" field in the mutation.
func (m *QRCodeMutation) Content() (r map[string]interface{}, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldContent(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *QRCodeMutation) ResetContent() {
	m.content = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QRCodeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QRCodeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QRCodeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QRCodeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QRCodeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QRCodeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *QRCodeMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *QRCodeMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldExpiresAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (m *QRCodeMutation) ClearExpiresAt() {
	m.expires_at = nil
	m.clearedFields[qrcode.FieldExpiresAt] = struct{}{}
}

// ExpiresAtCleared returns if the "expires_at" field was cleared in this mutation.
func (m *QRCodeMutation) ExpiresAtCleared() bool {
	_, ok := m.clearedFields[qrcode.FieldExpiresAt]
	return ok
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *QRCodeMutation) ResetExpiresAt() {
	m.expires_at = nil
	delete(m.clearedFields, qrcode.FieldExpiresAt)
}

// SetAnalytics sets the "analytics" field.
func (m *QRCodeMutation) SetAnalytics(b bool) {
	m.analytics = &b
}

// Analytics returns the value of the "analytics" field in the mutation.
func (m *QRCodeMutation) Analytics() (r bool, exists bool) {
	v := m.analytics
	if v == nil {
		return
	}
	return *v, true
}

// OldAnalytics returns the old "analytics" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldAnalytics(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnalytics is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnalytics requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnalytics: %w", err)
	}
	return oldValue.Analytics, nil
}

// ResetAnalytics resets all changes to the "analytics" field.
func (m *QRCodeMutation) ResetAnalytics() {
	m.analytics = nil
}

// SetActive sets the "active" field.
func (m *QRCodeMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *QRCodeMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *QRCodeMutation) ResetActive() {
	m.active = nil
}

// SetTags sets the "tags" field.
func (m *QRCodeMutation) SetTags(s []string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *QRCodeMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *QRCodeMutation) AppendTags(s []string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *QRCodeMutation) AppendedTags() ([]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ClearTags clears the value of the "tags" field.
func (m *QRCodeMutation) ClearTags() {
	m.tags = nil
	m.appendtags = nil
	m.clearedFields[qrcode.FieldTags] = struct{}{}
}

// TagsCleared returns if the "tags" field was cleared in this mutation.
func (m *QRCodeMutation) TagsCleared() bool {
	_, ok := m.clearedFields[qrcode.FieldTags]
	return ok
}

// ResetTags resets all changes to the "tags" field.
func (m *QRCodeMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
	delete(m.clearedFields, qrcode.FieldTags)
}

// SetDesign sets the "design" field.
func (m *QRCodeMutation) SetDesign(value map[string]interface{}) {
	m.design = &value
}

// Design returns the value of the "design" field in the mutation.
func (m *QRCodeMutation) Design() (r map[string]interface{}, exists bool) {
	v := m.design
	if v == nil {
		return
	}
	return *v, true
}

// OldDesign returns the old "design" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldDesign(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesign is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesign requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesign: %w", err)
	}
	return oldValue.Design, nil
}

// ClearDesign clears the value of the "design" field.
func (m *QRCodeMutation) ClearDesign() {
	m.design = nil
	m.clearedFields[qrcode.FieldDesign] = struct{}{}
}

// DesignCleared returns if the "design" field was cleared in this mutation.
func (m *QRCodeMutation) DesignCleared() bool {
	_, ok := m.clearedFields[qrcode.FieldDesign]
	return ok
}

// ResetDesign resets all changes to the "design" field.
func (m *QRCodeMutation) ResetDesign() {
	m.design = nil
	delete(m.clearedFields, qrcode.FieldDesign)
}

// SetGroupID sets the "group_id" field.
func (m *QRCodeMutation) SetGroupID(i int) {
	m.group = &i
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *QRCodeMutation) GroupID() (r int, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the QRCode entity.
// If the QRCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeMutation) OldGroupID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// ClearGroupID clears the value of the "group_id" field.
func (m *QRCodeMutation) ClearGroupID() {
	m.group = nil
	m.clearedFields[qrcode.FieldGroupID] = struct{}{}
}

// GroupIDCleared returns if the "group_id" field was cleared in this mutation.
func (m *QRCodeMutation) GroupIDCleared() bool {
	_, ok := m.clearedFields[qrcode.FieldGroupID]
	return ok
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *QRCodeMutation) ResetGroupID() {
	m.group = nil
	delete(m.clearedFields, qrcode.FieldGroupID)
}

// AddFileRefIDs adds the "file_refs" edge to the FileReference entity by ids.
func (m *QRCodeMutation) AddFileRefIDs(ids ...int) {
	if m.file_refs == nil {
		m.file_refs = make(map[int]struct{})
	}
	for i := range ids {
		m.file_refs[ids[i]] = struct{}{}
	}
}

// ClearFileRefs clears the "file_refs" edge to the FileReference entity.
func (m *QRCodeMutation) ClearFileRefs() {
	m.clearedfile_refs = true
}

// FileRefsCleared reports if the "file_refs" edge to the FileReference entity was cleared.
func (m *QRCodeMutation) FileRefsCleared() bool {
	return m.clearedfile_refs
}

// RemoveFileRefIDs removes the "file_refs" edge to the FileReference entity by IDs.
func (m *QRCodeMutation) RemoveFileRefIDs(ids ...int) {
	if m.removedfile_refs == nil {
		m.removedfile_refs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.file_refs, ids[i])
		m.removedfile_refs[ids[i]] = struct{}{}
	}
}

// RemovedFileRefs returns the removed IDs of the "file_refs" edge to the FileReference entity.
func (m *QRCodeMutation) RemovedFileRefsIDs() (ids []int) {
	for id := range m.removedfile_refs {
		ids = append(ids, id)
	}
	return
}

// FileRefsIDs returns the "file_refs" edge IDs in the mutation.
func (m *QRCodeMutation) FileRefsIDs() (ids []int) {
	for id := range m.file_refs {
		ids = append(ids, id)
	}
	return
}

// ResetFileRefs resets all changes to the "file_refs" edge.
func (m *QRCodeMutation) ResetFileRefs() {
	m.file_refs = nil
	m.clearedfile_refs = false
	m.removedfile_refs = nil
}

// ClearGroup clears the "group" edge to the QRCodeGroup entity.
func (m *QRCodeMutation) ClearGroup() {
	m.clearedgroup = true
	m.clearedFields[qrcode.FieldGroupID] = struct{}{}
}

// GroupCleared reports if the "group" edge to the QRCodeGroup entity was cleared.
func (m *QRCodeMutation) GroupCleared() bool {
	return m.GroupIDCleared() || m.clearedgroup
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *QRCodeMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *QRCodeMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// AddAnalyticsRecordIDs adds the "analytics_records" edge to the QRCodeAnalytics entity by ids.
func (m *QRCodeMutation) AddAnalyticsRecordIDs(ids ...int) {
	if m.analytics_records == nil {
		m.analytics_records = make(map[int]struct{})
	}
	for i := range ids {
		m.analytics_records[ids[i]] = struct{}{}
	}
}

// ClearAnalyticsRecords clears the "analytics_records" edge to the QRCodeAnalytics entity.
func (m *QRCodeMutation) ClearAnalyticsRecords() {
	m.clearedanalytics_records = true
}

// AnalyticsRecordsCleared reports if the "analytics_records" edge to the QRCodeAnalytics entity was cleared.
func (m *QRCodeMutation) AnalyticsRecordsCleared() bool {
	return m.clearedanalytics_records
}

// RemoveAnalyticsRecordIDs removes the "analytics_records" edge to the QRCodeAnalytics entity by IDs.
func (m *QRCodeMutation) RemoveAnalyticsRecordIDs(ids ...int) {
	if m.removedanalytics_records == nil {
		m.removedanalytics_records = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.analytics_records, ids[i])
		m.removedanalytics_records[ids[i]] = struct{}{}
	}
}

// RemovedAnalyticsRecords returns the removed IDs of the "analytics_records" edge to the QRCodeAnalytics entity.
func (m *QRCodeMutation) RemovedAnalyticsRecordsIDs() (ids []int) {
	for id := range m.removedanalytics_records {
		ids = append(ids, id)
	}
	return
}

// AnalyticsRecordsIDs returns the "analytics_records" edge IDs in the mutation.
func (m *QRCodeMutation) AnalyticsRecordsIDs() (ids []int) {
	for id := range m.analytics_records {
		ids = append(ids, id)
	}
	return
}

// ResetAnalyticsRecords resets all changes to the "analytics_records" edge.
func (m *QRCodeMutation) ResetAnalyticsRecords() {
	m.analytics_records = nil
	m.clearedanalytics_records = false
	m.removedanalytics_records = nil
}

// Where appends a list predicates to the QRCodeMutation builder.
func (m *QRCodeMutation) Where(ps ...predicate.QRCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QRCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QRCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QRCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QRCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QRCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QRCode).
func (m *QRCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QRCodeMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m._type != nil {
		fields = append(fields, qrcode.FieldType)
	}
	if m.title != nil {
		fields = append(fields, qrcode.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, qrcode.FieldDescription)
	}
	if m.redirect_url != nil {
		fields = append(fields, qrcode.FieldRedirectURL)
	}
	if m.short_url != nil {
		fields = append(fields, qrcode.FieldShortURL)
	}
	if m.content != nil {
		fields = append(fields, qrcode.FieldContent)
	}
	if m.created_at != nil {
		fields = append(fields, qrcode.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, qrcode.FieldUpdatedAt)
	}
	if m.expires_at != nil {
		fields = append(fields, qrcode.FieldExpiresAt)
	}
	if m.analytics != nil {
		fields = append(fields, qrcode.FieldAnalytics)
	}
	if m.active != nil {
		fields = append(fields, qrcode.FieldActive)
	}
	if m.tags != nil {
		fields = append(fields, qrcode.FieldTags)
	}
	if m.design != nil {
		fields = append(fields, qrcode.FieldDesign)
	}
	if m.group != nil {
		fields = append(fields, qrcode.FieldGroupID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QRCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case qrcode.FieldType:
		return m.GetType()
	case qrcode.FieldTitle:
		return m.Title()
	case qrcode.FieldDescription:
		return m.Description()
	case qrcode.FieldRedirectURL:
		return m.RedirectURL()
	case qrcode.FieldShortURL:
		return m.ShortURL()
	case qrcode.FieldContent:
		return m.Content()
	case qrcode.FieldCreatedAt:
		return m.CreatedAt()
	case qrcode.FieldUpdatedAt:
		return m.UpdatedAt()
	case qrcode.FieldExpiresAt:
		return m.ExpiresAt()
	case qrcode.FieldAnalytics:
		return m.Analytics()
	case qrcode.FieldActive:
		return m.Active()
	case qrcode.FieldTags:
		return m.Tags()
	case qrcode.FieldDesign:
		return m.Design()
	case qrcode.FieldGroupID:
		return m.GroupID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QRCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case qrcode.FieldType:
		return m.OldType(ctx)
	case qrcode.FieldTitle:
		return m.OldTitle(ctx)
	case qrcode.FieldDescription:
		return m.OldDescription(ctx)
	case qrcode.FieldRedirectURL:
		return m.OldRedirectURL(ctx)
	case qrcode.FieldShortURL:
		return m.OldShortURL(ctx)
	case qrcode.FieldContent:
		return m.OldContent(ctx)
	case qrcode.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case qrcode.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case qrcode.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case qrcode.FieldAnalytics:
		return m.OldAnalytics(ctx)
	case qrcode.FieldActive:
		return m.OldActive(ctx)
	case qrcode.FieldTags:
		return m.OldTags(ctx)
	case qrcode.FieldDesign:
		return m.OldDesign(ctx)
	case qrcode.FieldGroupID:
		return m.OldGroupID(ctx)
	}
	return nil, fmt.Errorf("unknown QRCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QRCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case qrcode.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case qrcode.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case qrcode.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case qrcode.FieldRedirectURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirectURL(v)
		return nil
	case qrcode.FieldShortURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShortURL(v)
		return nil
	case qrcode.FieldContent:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case qrcode.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case qrcode.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case qrcode.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case qrcode.FieldAnalytics:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnalytics(v)
		return nil
	case qrcode.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case qrcode.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case qrcode.FieldDesign:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesign(v)
		return nil
	case qrcode.FieldGroupID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	}
	return fmt.Errorf("unknown QRCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QRCodeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QRCodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QRCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QRCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QRCodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(qrcode.FieldDescription) {
		fields = append(fields, qrcode.FieldDescription)
	}
	if m.FieldCleared(qrcode.FieldRedirectURL) {
		fields = append(fields, qrcode.FieldRedirectURL)
	}
	if m.FieldCleared(qrcode.FieldShortURL) {
		fields = append(fields, qrcode.FieldShortURL)
	}
	if m.FieldCleared(qrcode.FieldExpiresAt) {
		fields = append(fields, qrcode.FieldExpiresAt)
	}
	if m.FieldCleared(qrcode.FieldTags) {
		fields = append(fields, qrcode.FieldTags)
	}
	if m.FieldCleared(qrcode.FieldDesign) {
		fields = append(fields, qrcode.FieldDesign)
	}
	if m.FieldCleared(qrcode.FieldGroupID) {
		fields = append(fields, qrcode.FieldGroupID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QRCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QRCodeMutation) ClearField(name string) error {
	switch name {
	case qrcode.FieldDescription:
		m.ClearDescription()
		return nil
	case qrcode.FieldRedirectURL:
		m.ClearRedirectURL()
		return nil
	case qrcode.FieldShortURL:
		m.ClearShortURL()
		return nil
	case qrcode.FieldExpiresAt:
		m.ClearExpiresAt()
		return nil
	case qrcode.FieldTags:
		m.ClearTags()
		return nil
	case qrcode.FieldDesign:
		m.ClearDesign()
		return nil
	case qrcode.FieldGroupID:
		m.ClearGroupID()
		return nil
	}
	return fmt.Errorf("unknown QRCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QRCodeMutation) ResetField(name string) error {
	switch name {
	case qrcode.FieldType:
		m.ResetType()
		return nil
	case qrcode.FieldTitle:
		m.ResetTitle()
		return nil
	case qrcode.FieldDescription:
		m.ResetDescription()
		return nil
	case qrcode.FieldRedirectURL:
		m.ResetRedirectURL()
		return nil
	case qrcode.FieldShortURL:
		m.ResetShortURL()
		return nil
	case qrcode.FieldContent:
		m.ResetContent()
		return nil
	case qrcode.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case qrcode.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case qrcode.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case qrcode.FieldAnalytics:
		m.ResetAnalytics()
		return nil
	case qrcode.FieldActive:
		m.ResetActive()
		return nil
	case qrcode.FieldTags:
		m.ResetTags()
		return nil
	case qrcode.FieldDesign:
		m.ResetDesign()
		return nil
	case qrcode.FieldGroupID:
		m.ResetGroupID()
		return nil
	}
	return fmt.Errorf("unknown QRCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QRCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.file_refs != nil {
		edges = append(edges, qrcode.EdgeFileRefs)
	}
	if m.group != nil {
		edges = append(edges, qrcode.EdgeGroup)
	}
	if m.analytics_records != nil {
		edges = append(edges, qrcode.EdgeAnalyticsRecords)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QRCodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case qrcode.EdgeFileRefs:
		ids := make([]ent.Value, 0, len(m.file_refs))
		for id := range m.file_refs {
			ids = append(ids, id)
		}
		return ids
	case qrcode.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case qrcode.EdgeAnalyticsRecords:
		ids := make([]ent.Value, 0, len(m.analytics_records))
		for id := range m.analytics_records {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QRCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfile_refs != nil {
		edges = append(edges, qrcode.EdgeFileRefs)
	}
	if m.removedanalytics_records != nil {
		edges = append(edges, qrcode.EdgeAnalyticsRecords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QRCodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case qrcode.EdgeFileRefs:
		ids := make([]ent.Value, 0, len(m.removedfile_refs))
		for id := range m.removedfile_refs {
			ids = append(ids, id)
		}
		return ids
	case qrcode.EdgeAnalyticsRecords:
		ids := make([]ent.Value, 0, len(m.removedanalytics_records))
		for id := range m.removedanalytics_records {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QRCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfile_refs {
		edges = append(edges, qrcode.EdgeFileRefs)
	}
	if m.clearedgroup {
		edges = append(edges, qrcode.EdgeGroup)
	}
	if m.clearedanalytics_records {
		edges = append(edges, qrcode.EdgeAnalyticsRecords)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QRCodeMutation) EdgeCleared(name string) bool {
	switch name {
	case qrcode.EdgeFileRefs:
		return m.clearedfile_refs
	case qrcode.EdgeGroup:
		return m.clearedgroup
	case qrcode.EdgeAnalyticsRecords:
		return m.clearedanalytics_records
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QRCodeMutation) ClearEdge(name string) error {
	switch name {
	case qrcode.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown QRCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QRCodeMutation) ResetEdge(name string) error {
	switch name {
	case qrcode.EdgeFileRefs:
		m.ResetFileRefs()
		return nil
	case qrcode.EdgeGroup:
		m.ResetGroup()
		return nil
	case qrcode.EdgeAnalyticsRecords:
		m.ResetAnalyticsRecords()
		return nil
	}
	return fmt.Errorf("unknown QRCode edge %s", name)
}

// QRCodeAnalyticsMutation represents an operation that mutates the QRCodeAnalytics nodes in the graph.
type QRCodeAnalyticsMutation struct {
	config
	op             Op
	typ            string
	id             *int
	ip_address     *string
	user_agent     *string
	location       *string
	device         *string
	scanned_at     *time.Time
	clearedFields  map[string]struct{}
	qr_code        *int
	clearedqr_code bool
	done           bool
	oldValue       func(context.Context) (*QRCodeAnalytics, error)
	predicates     []predicate.QRCodeAnalytics
}

var _ ent.Mutation = (*QRCodeAnalyticsMutation)(nil)

// qrcodeanalyticsOption allows management of the mutation configuration using functional options.
type qrcodeanalyticsOption func(*QRCodeAnalyticsMutation)

// newQRCodeAnalyticsMutation creates new mutation for the QRCodeAnalytics entity.
func newQRCodeAnalyticsMutation(c config, op Op, opts ...qrcodeanalyticsOption) *QRCodeAnalyticsMutation {
	m := &QRCodeAnalyticsMutation{
		config:        c,
		op:            op,
		typ:           TypeQRCodeAnalytics,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQRCodeAnalyticsID sets the ID field of the mutation.
func withQRCodeAnalyticsID(id int) qrcodeanalyticsOption {
	return func(m *QRCodeAnalyticsMutation) {
		var (
			err   error
			once  sync.Once
			value *QRCodeAnalytics
		)
		m.oldValue = func(ctx context.Context) (*QRCodeAnalytics, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QRCodeAnalytics.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQRCodeAnalytics sets the old QRCodeAnalytics of the mutation.
func withQRCodeAnalytics(node *QRCodeAnalytics) qrcodeanalyticsOption {
	return func(m *QRCodeAnalyticsMutation) {
		m.oldValue = func(context.Context) (*QRCodeAnalytics, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QRCodeAnalyticsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QRCodeAnalyticsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QRCodeAnalyticsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QRCodeAnalyticsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QRCodeAnalytics.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIPAddress sets the "ip_address" field.
func (m *QRCodeAnalyticsMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *QRCodeAnalyticsMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the QRCodeAnalytics entity.
// If the QRCodeAnalytics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeAnalyticsMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *QRCodeAnalyticsMutation) ResetIPAddress() {
	m.ip_address = nil
}

// SetUserAgent sets the "user_agent" field.
func (m *QRCodeAnalyticsMutation) SetUserAgent(s string) {
	m.user_agent = &s
}

// UserAgent returns the value of the "user_agent" field in the mutation.
func (m *QRCodeAnalyticsMutation) UserAgent() (r string, exists bool) {
	v := m.user_agent
	if v == nil {
		return
	}
	return *v, true
}

// OldUserAgent returns the old "user_agent" field's value of the QRCodeAnalytics entity.
// If the QRCodeAnalytics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeAnalyticsMutation) OldUserAgent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserAgent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserAgent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserAgent: %w", err)
	}
	return oldValue.UserAgent, nil
}

// ResetUserAgent resets all changes to the "user_agent" field.
func (m *QRCodeAnalyticsMutation) ResetUserAgent() {
	m.user_agent = nil
}

// SetLocation sets the "location" field.
func (m *QRCodeAnalyticsMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *QRCodeAnalyticsMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the QRCodeAnalytics entity.
// If the QRCodeAnalytics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeAnalyticsMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *QRCodeAnalyticsMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[qrcodeanalytics.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *QRCodeAnalyticsMutation) LocationCleared() bool {
	_, ok := m.clearedFields[qrcodeanalytics.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *QRCodeAnalyticsMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, qrcodeanalytics.FieldLocation)
}

// SetDevice sets the "device" field.
func (m *QRCodeAnalyticsMutation) SetDevice(s string) {
	m.device = &s
}

// Device returns the value of the "device" field in the mutation.
func (m *QRCodeAnalyticsMutation) Device() (r string, exists bool) {
	v := m.device
	if v == nil {
		return
	}
	return *v, true
}

// OldDevice returns the old "device" field's value of the QRCodeAnalytics entity.
// If the QRCodeAnalytics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeAnalyticsMutation) OldDevice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevice: %w", err)
	}
	return oldValue.Device, nil
}

// ClearDevice clears the value of the "device" field.
func (m *QRCodeAnalyticsMutation) ClearDevice() {
	m.device = nil
	m.clearedFields[qrcodeanalytics.FieldDevice] = struct{}{}
}

// DeviceCleared returns if the "device" field was cleared in this mutation.
func (m *QRCodeAnalyticsMutation) DeviceCleared() bool {
	_, ok := m.clearedFields[qrcodeanalytics.FieldDevice]
	return ok
}

// ResetDevice resets all changes to the "device" field.
func (m *QRCodeAnalyticsMutation) ResetDevice() {
	m.device = nil
	delete(m.clearedFields, qrcodeanalytics.FieldDevice)
}

// SetScannedAt sets the "scanned_at" field.
func (m *QRCodeAnalyticsMutation) SetScannedAt(t time.Time) {
	m.scanned_at = &t
}

// ScannedAt returns the value of the "scanned_at" field in the mutation.
func (m *QRCodeAnalyticsMutation) ScannedAt() (r time.Time, exists bool) {
	v := m.scanned_at
	if v == nil {
		return
	}
	return *v, true
}

// OldScannedAt returns the old "scanned_at" field's value of the QRCodeAnalytics entity.
// If the QRCodeAnalytics object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeAnalyticsMutation) OldScannedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScannedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScannedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScannedAt: %w", err)
	}
	return oldValue.ScannedAt, nil
}

// ResetScannedAt resets all changes to the "scanned_at" field.
func (m *QRCodeAnalyticsMutation) ResetScannedAt() {
	m.scanned_at = nil
}

// SetQrCodeID sets the "qr_code" edge to the QRCode entity by id.
func (m *QRCodeAnalyticsMutation) SetQrCodeID(id int) {
	m.qr_code = &id
}

// ClearQrCode clears the "qr_code" edge to the QRCode entity.
func (m *QRCodeAnalyticsMutation) ClearQrCode() {
	m.clearedqr_code = true
}

// QrCodeCleared reports if the "qr_code" edge to the QRCode entity was cleared.
func (m *QRCodeAnalyticsMutation) QrCodeCleared() bool {
	return m.clearedqr_code
}

// QrCodeID returns the "qr_code" edge ID in the mutation.
func (m *QRCodeAnalyticsMutation) QrCodeID() (id int, exists bool) {
	if m.qr_code != nil {
		return *m.qr_code, true
	}
	return
}

// QrCodeIDs returns the "qr_code" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QrCodeID instead. It exists only for internal usage by the builders.
func (m *QRCodeAnalyticsMutation) QrCodeIDs() (ids []int) {
	if id := m.qr_code; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQrCode resets all changes to the "qr_code" edge.
func (m *QRCodeAnalyticsMutation) ResetQrCode() {
	m.qr_code = nil
	m.clearedqr_code = false
}

// Where appends a list predicates to the QRCodeAnalyticsMutation builder.
func (m *QRCodeAnalyticsMutation) Where(ps ...predicate.QRCodeAnalytics) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QRCodeAnalyticsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QRCodeAnalyticsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QRCodeAnalytics, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QRCodeAnalyticsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QRCodeAnalyticsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QRCodeAnalytics).
func (m *QRCodeAnalyticsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QRCodeAnalyticsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.ip_address != nil {
		fields = append(fields, qrcodeanalytics.FieldIPAddress)
	}
	if m.user_agent != nil {
		fields = append(fields, qrcodeanalytics.FieldUserAgent)
	}
	if m.location != nil {
		fields = append(fields, qrcodeanalytics.FieldLocation)
	}
	if m.device != nil {
		fields = append(fields, qrcodeanalytics.FieldDevice)
	}
	if m.scanned_at != nil {
		fields = append(fields, qrcodeanalytics.FieldScannedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QRCodeAnalyticsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case qrcodeanalytics.FieldIPAddress:
		return m.IPAddress()
	case qrcodeanalytics.FieldUserAgent:
		return m.UserAgent()
	case qrcodeanalytics.FieldLocation:
		return m.Location()
	case qrcodeanalytics.FieldDevice:
		return m.Device()
	case qrcodeanalytics.FieldScannedAt:
		return m.ScannedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QRCodeAnalyticsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case qrcodeanalytics.FieldIPAddress:
		return m.OldIPAddress(ctx)
	case qrcodeanalytics.FieldUserAgent:
		return m.OldUserAgent(ctx)
	case qrcodeanalytics.FieldLocation:
		return m.OldLocation(ctx)
	case qrcodeanalytics.FieldDevice:
		return m.OldDevice(ctx)
	case qrcodeanalytics.FieldScannedAt:
		return m.OldScannedAt(ctx)
	}
	return nil, fmt.Errorf("unknown QRCodeAnalytics field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QRCodeAnalyticsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case qrcodeanalytics.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	case qrcodeanalytics.FieldUserAgent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserAgent(v)
		return nil
	case qrcodeanalytics.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case qrcodeanalytics.FieldDevice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevice(v)
		return nil
	case qrcodeanalytics.FieldScannedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScannedAt(v)
		return nil
	}
	return fmt.Errorf("unknown QRCodeAnalytics field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QRCodeAnalyticsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QRCodeAnalyticsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QRCodeAnalyticsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QRCodeAnalytics numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QRCodeAnalyticsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(qrcodeanalytics.FieldLocation) {
		fields = append(fields, qrcodeanalytics.FieldLocation)
	}
	if m.FieldCleared(qrcodeanalytics.FieldDevice) {
		fields = append(fields, qrcodeanalytics.FieldDevice)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QRCodeAnalyticsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QRCodeAnalyticsMutation) ClearField(name string) error {
	switch name {
	case qrcodeanalytics.FieldLocation:
		m.ClearLocation()
		return nil
	case qrcodeanalytics.FieldDevice:
		m.ClearDevice()
		return nil
	}
	return fmt.Errorf("unknown QRCodeAnalytics nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QRCodeAnalyticsMutation) ResetField(name string) error {
	switch name {
	case qrcodeanalytics.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	case qrcodeanalytics.FieldUserAgent:
		m.ResetUserAgent()
		return nil
	case qrcodeanalytics.FieldLocation:
		m.ResetLocation()
		return nil
	case qrcodeanalytics.FieldDevice:
		m.ResetDevice()
		return nil
	case qrcodeanalytics.FieldScannedAt:
		m.ResetScannedAt()
		return nil
	}
	return fmt.Errorf("unknown QRCodeAnalytics field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QRCodeAnalyticsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.qr_code != nil {
		edges = append(edges, qrcodeanalytics.EdgeQrCode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QRCodeAnalyticsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case qrcodeanalytics.EdgeQrCode:
		if id := m.qr_code; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QRCodeAnalyticsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QRCodeAnalyticsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QRCodeAnalyticsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedqr_code {
		edges = append(edges, qrcodeanalytics.EdgeQrCode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QRCodeAnalyticsMutation) EdgeCleared(name string) bool {
	switch name {
	case qrcodeanalytics.EdgeQrCode:
		return m.clearedqr_code
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QRCodeAnalyticsMutation) ClearEdge(name string) error {
	switch name {
	case qrcodeanalytics.EdgeQrCode:
		m.ClearQrCode()
		return nil
	}
	return fmt.Errorf("unknown QRCodeAnalytics unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QRCodeAnalyticsMutation) ResetEdge(name string) error {
	switch name {
	case qrcodeanalytics.EdgeQrCode:
		m.ResetQrCode()
		return nil
	}
	return fmt.Errorf("unknown QRCodeAnalytics edge %s", name)
}

// QRCodeGroupMutation represents an operation that mutates the QRCodeGroup nodes in the graph.
type QRCodeGroupMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	description    *string
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	qrcodes        map[int]struct{}
	removedqrcodes map[int]struct{}
	clearedqrcodes bool
	done           bool
	oldValue       func(context.Context) (*QRCodeGroup, error)
	predicates     []predicate.QRCodeGroup
}

var _ ent.Mutation = (*QRCodeGroupMutation)(nil)

// qrcodegroupOption allows management of the mutation configuration using functional options.
type qrcodegroupOption func(*QRCodeGroupMutation)

// newQRCodeGroupMutation creates new mutation for the QRCodeGroup entity.
func newQRCodeGroupMutation(c config, op Op, opts ...qrcodegroupOption) *QRCodeGroupMutation {
	m := &QRCodeGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeQRCodeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQRCodeGroupID sets the ID field of the mutation.
func withQRCodeGroupID(id int) qrcodegroupOption {
	return func(m *QRCodeGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *QRCodeGroup
		)
		m.oldValue = func(ctx context.Context) (*QRCodeGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QRCodeGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQRCodeGroup sets the old QRCodeGroup of the mutation.
func withQRCodeGroup(node *QRCodeGroup) qrcodegroupOption {
	return func(m *QRCodeGroupMutation) {
		m.oldValue = func(context.Context) (*QRCodeGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QRCodeGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QRCodeGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QRCodeGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QRCodeGroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QRCodeGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *QRCodeGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *QRCodeGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the QRCodeGroup entity.
// If the QRCodeGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *QRCodeGroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *QRCodeGroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *QRCodeGroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the QRCodeGroup entity.
// If the QRCodeGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeGroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *QRCodeGroupMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[qrcodegroup.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *QRCodeGroupMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[qrcodegroup.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *QRCodeGroupMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, qrcodegroup.FieldDescription)
}

// SetCreatedAt sets the "created_at" field.
func (m *QRCodeGroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QRCodeGroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the QRCodeGroup entity.
// If the QRCodeGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeGroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QRCodeGroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QRCodeGroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QRCodeGroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the QRCodeGroup entity.
// If the QRCodeGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QRCodeGroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QRCodeGroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddQrcodeIDs adds the "qrcodes" edge to the QRCode entity by ids.
func (m *QRCodeGroupMutation) AddQrcodeIDs(ids ...int) {
	if m.qrcodes == nil {
		m.qrcodes = make(map[int]struct{})
	}
	for i := range ids {
		m.qrcodes[ids[i]] = struct{}{}
	}
}

// ClearQrcodes clears the "qrcodes" edge to the QRCode entity.
func (m *QRCodeGroupMutation) ClearQrcodes() {
	m.clearedqrcodes = true
}

// QrcodesCleared reports if the "qrcodes" edge to the QRCode entity was cleared.
func (m *QRCodeGroupMutation) QrcodesCleared() bool {
	return m.clearedqrcodes
}

// RemoveQrcodeIDs removes the "qrcodes" edge to the QRCode entity by IDs.
func (m *QRCodeGroupMutation) RemoveQrcodeIDs(ids ...int) {
	if m.removedqrcodes == nil {
		m.removedqrcodes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.qrcodes, ids[i])
		m.removedqrcodes[ids[i]] = struct{}{}
	}
}

// RemovedQrcodes returns the removed IDs of the "qrcodes" edge to the QRCode entity.
func (m *QRCodeGroupMutation) RemovedQrcodesIDs() (ids []int) {
	for id := range m.removedqrcodes {
		ids = append(ids, id)
	}
	return
}

// QrcodesIDs returns the "qrcodes" edge IDs in the mutation.
func (m *QRCodeGroupMutation) QrcodesIDs() (ids []int) {
	for id := range m.qrcodes {
		ids = append(ids, id)
	}
	return
}

// ResetQrcodes resets all changes to the "qrcodes" edge.
func (m *QRCodeGroupMutation) ResetQrcodes() {
	m.qrcodes = nil
	m.clearedqrcodes = false
	m.removedqrcodes = nil
}

// Where appends a list predicates to the QRCodeGroupMutation builder.
func (m *QRCodeGroupMutation) Where(ps ...predicate.QRCodeGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QRCodeGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QRCodeGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QRCodeGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QRCodeGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QRCodeGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QRCodeGroup).
func (m *QRCodeGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QRCodeGroupMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, qrcodegroup.FieldName)
	}
	if m.description != nil {
		fields = append(fields, qrcodegroup.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, qrcodegroup.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, qrcodegroup.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QRCodeGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case qrcodegroup.FieldName:
		return m.Name()
	case qrcodegroup.FieldDescription:
		return m.Description()
	case qrcodegroup.FieldCreatedAt:
		return m.CreatedAt()
	case qrcodegroup.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QRCodeGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case qrcodegroup.FieldName:
		return m.OldName(ctx)
	case qrcodegroup.FieldDescription:
		return m.OldDescription(ctx)
	case qrcodegroup.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case qrcodegroup.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown QRCodeGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QRCodeGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case qrcodegroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case qrcodegroup.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case qrcodegroup.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case qrcodegroup.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown QRCodeGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QRCodeGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QRCodeGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QRCodeGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QRCodeGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QRCodeGroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(qrcodegroup.FieldDescription) {
		fields = append(fields, qrcodegroup.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QRCodeGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QRCodeGroupMutation) ClearField(name string) error {
	switch name {
	case qrcodegroup.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown QRCodeGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QRCodeGroupMutation) ResetField(name string) error {
	switch name {
	case qrcodegroup.FieldName:
		m.ResetName()
		return nil
	case qrcodegroup.FieldDescription:
		m.ResetDescription()
		return nil
	case qrcodegroup.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case qrcodegroup.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown QRCodeGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QRCodeGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.qrcodes != nil {
		edges = append(edges, qrcodegroup.EdgeQrcodes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QRCodeGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case qrcodegroup.EdgeQrcodes:
		ids := make([]ent.Value, 0, len(m.qrcodes))
		for id := range m.qrcodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QRCodeGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedqrcodes != nil {
		edges = append(edges, qrcodegroup.EdgeQrcodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QRCodeGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case qrcodegroup.EdgeQrcodes:
		ids := make([]ent.Value, 0, len(m.removedqrcodes))
		for id := range m.removedqrcodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QRCodeGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedqrcodes {
		edges = append(edges, qrcodegroup.EdgeQrcodes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QRCodeGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case qrcodegroup.EdgeQrcodes:
		return m.clearedqrcodes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QRCodeGroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown QRCodeGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QRCodeGroupMutation) ResetEdge(name string) error {
	switch name {
	case qrcodegroup.EdgeQrcodes:
		m.ResetQrcodes()
		return nil
	}
	return fmt.Errorf("unknown QRCodeGroup edge %s", name)
}

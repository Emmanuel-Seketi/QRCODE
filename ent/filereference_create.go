// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qr_backend/ent/filereference"
	"qr_backend/ent/qrcode"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileReferenceCreate is the builder for creating a FileReference entity.
type FileReferenceCreate struct {
	config
	mutation *FileReferenceMutation
	hooks    []Hook
}

// SetFilename sets the "filename" field.
func (frc *FileReferenceCreate) SetFilename(s string) *FileReferenceCreate {
	frc.mutation.SetFilename(s)
	return frc
}

// SetURL sets the "url" field.
func (frc *FileReferenceCreate) SetURL(s string) *FileReferenceCreate {
	frc.mutation.SetURL(s)
	return frc
}

// SetSize sets the "size" field.
func (frc *FileReferenceCreate) SetSize(i int64) *FileReferenceCreate {
	frc.mutation.SetSize(i)
	return frc
}

// SetType sets the "type" field.
func (frc *FileReferenceCreate) SetType(s string) *FileReferenceCreate {
	frc.mutation.SetType(s)
	return frc
}

// SetQrCodeID sets the "qr_code" edge to the QRCode entity by ID.
func (frc *FileReferenceCreate) SetQrCodeID(id int) *FileReferenceCreate {
	frc.mutation.SetQrCodeID(id)
	return frc
}

// SetNillableQrCodeID sets the "qr_code" edge to the QRCode entity by ID if the given value is not nil.
func (frc *FileReferenceCreate) SetNillableQrCodeID(id *int) *FileReferenceCreate {
	if id != nil {
		frc = frc.SetQrCodeID(*id)
	}
	return frc
}

// SetQrCode sets the "qr_code" edge to the QRCode entity.
func (frc *FileReferenceCreate) SetQrCode(q *QRCode) *FileReferenceCreate {
	return frc.SetQrCodeID(q.ID)
}

// Mutation returns the FileReferenceMutation object of the builder.
func (frc *FileReferenceCreate) Mutation() *FileReferenceMutation {
	return frc.mutation
}

// Save creates the FileReference in the database.
func (frc *FileReferenceCreate) Save(ctx context.Context) (*FileReference, error) {
	return withHooks(ctx, frc.sqlSave, frc.mutation, frc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FileReferenceCreate) SaveX(ctx context.Context) *FileReference {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FileReferenceCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FileReferenceCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (frc *FileReferenceCreate) check() error {
	if _, ok := frc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "FileReference.filename"`)}
	}
	if v, ok := frc.mutation.Filename(); ok {
		if err := filereference.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "FileReference.filename": %w`, err)}
		}
	}
	if _, ok := frc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "FileReference.url"`)}
	}
	if v, ok := frc.mutation.URL(); ok {
		if err := filereference.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "FileReference.url": %w`, err)}
		}
	}
	if _, ok := frc.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "FileReference.size"`)}
	}
	if _, ok := frc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FileReference.type"`)}
	}
	return nil
}

func (frc *FileReferenceCreate) sqlSave(ctx context.Context) (*FileReference, error) {
	if err := frc.check(); err != nil {
		return nil, err
	}
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	frc.mutation.id = &_node.ID
	frc.mutation.done = true
	return _node, nil
}

func (frc *FileReferenceCreate) createSpec() (*FileReference, *sqlgraph.CreateSpec) {
	var (
		_node = &FileReference{config: frc.config}
		_spec = sqlgraph.NewCreateSpec(filereference.Table, sqlgraph.NewFieldSpec(filereference.FieldID, field.TypeInt))
	)
	if value, ok := frc.mutation.Filename(); ok {
		_spec.SetField(filereference.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := frc.mutation.URL(); ok {
		_spec.SetField(filereference.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := frc.mutation.Size(); ok {
		_spec.SetField(filereference.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := frc.mutation.GetType(); ok {
		_spec.SetField(filereference.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := frc.mutation.QrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filereference.QrCodeTable,
			Columns: []string{filereference.QrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.qr_code_file_refs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileReferenceCreateBulk is the builder for creating many FileReference entities in bulk.
type FileReferenceCreateBulk struct {
	config
	err      error
	builders []*FileReferenceCreate
}

// Save creates the FileReference entities in the database.
func (frcb *FileReferenceCreateBulk) Save(ctx context.Context) ([]*FileReference, error) {
	if frcb.err != nil {
		return nil, frcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FileReference, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileReferenceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FileReferenceCreateBulk) SaveX(ctx context.Context) []*FileReference {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FileReferenceCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FileReferenceCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}

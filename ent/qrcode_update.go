// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qr_backend/ent/filereference"
	"qr_backend/ent/predicate"
	"qr_backend/ent/qrcode"
	"qr_backend/ent/qrcodeanalytics"
	"qr_backend/ent/qrcodegroup"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// QRCodeUpdate is the builder for updating QRCode entities.
type QRCodeUpdate struct {
	config
	hooks    []Hook
	mutation *QRCodeMutation
}

// Where appends a list predicates to the QRCodeUpdate builder.
func (qcu *QRCodeUpdate) Where(ps ...predicate.QRCode) *QRCodeUpdate {
	qcu.mutation.Where(ps...)
	return qcu
}

// SetType sets the "type" field.
func (qcu *QRCodeUpdate) SetType(s string) *QRCodeUpdate {
	qcu.mutation.SetType(s)
	return qcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableType(s *string) *QRCodeUpdate {
	if s != nil {
		qcu.SetType(*s)
	}
	return qcu
}

// SetTitle sets the "title" field.
func (qcu *QRCodeUpdate) SetTitle(s string) *QRCodeUpdate {
	qcu.mutation.SetTitle(s)
	return qcu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableTitle(s *string) *QRCodeUpdate {
	if s != nil {
		qcu.SetTitle(*s)
	}
	return qcu
}

// SetDescription sets the "description" field.
func (qcu *QRCodeUpdate) SetDescription(s string) *QRCodeUpdate {
	qcu.mutation.SetDescription(s)
	return qcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableDescription(s *string) *QRCodeUpdate {
	if s != nil {
		qcu.SetDescription(*s)
	}
	return qcu
}

// ClearDescription clears the value of the "description" field.
func (qcu *QRCodeUpdate) ClearDescription() *QRCodeUpdate {
	qcu.mutation.ClearDescription()
	return qcu
}

// SetRedirectURL sets the "redirect_url" field.
func (qcu *QRCodeUpdate) SetRedirectURL(s string) *QRCodeUpdate {
	qcu.mutation.SetRedirectURL(s)
	return qcu
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableRedirectURL(s *string) *QRCodeUpdate {
	if s != nil {
		qcu.SetRedirectURL(*s)
	}
	return qcu
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (qcu *QRCodeUpdate) ClearRedirectURL() *QRCodeUpdate {
	qcu.mutation.ClearRedirectURL()
	return qcu
}

// SetShortURL sets the "short_url" field.
func (qcu *QRCodeUpdate) SetShortURL(s string) *QRCodeUpdate {
	qcu.mutation.SetShortURL(s)
	return qcu
}

// SetNillableShortURL sets the "short_url" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableShortURL(s *string) *QRCodeUpdate {
	if s != nil {
		qcu.SetShortURL(*s)
	}
	return qcu
}

// ClearShortURL clears the value of the "short_url" field.
func (qcu *QRCodeUpdate) ClearShortURL() *QRCodeUpdate {
	qcu.mutation.ClearShortURL()
	return qcu
}

// SetContent sets the "content" field.
func (qcu *QRCodeUpdate) SetContent(m map[string]interface{}) *QRCodeUpdate {
	qcu.mutation.SetContent(m)
	return qcu
}

// SetCreatedAt sets the "created_at" field.
func (qcu *QRCodeUpdate) SetCreatedAt(t time.Time) *QRCodeUpdate {
	qcu.mutation.SetCreatedAt(t)
	return qcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableCreatedAt(t *time.Time) *QRCodeUpdate {
	if t != nil {
		qcu.SetCreatedAt(*t)
	}
	return qcu
}

// SetUpdatedAt sets the "updated_at" field.
func (qcu *QRCodeUpdate) SetUpdatedAt(t time.Time) *QRCodeUpdate {
	qcu.mutation.SetUpdatedAt(t)
	return qcu
}

// SetExpiresAt sets the "expires_at" field.
func (qcu *QRCodeUpdate) SetExpiresAt(t time.Time) *QRCodeUpdate {
	qcu.mutation.SetExpiresAt(t)
	return qcu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableExpiresAt(t *time.Time) *QRCodeUpdate {
	if t != nil {
		qcu.SetExpiresAt(*t)
	}
	return qcu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (qcu *QRCodeUpdate) ClearExpiresAt() *QRCodeUpdate {
	qcu.mutation.ClearExpiresAt()
	return qcu
}

// SetAnalytics sets the "analytics" field.
func (qcu *QRCodeUpdate) SetAnalytics(b bool) *QRCodeUpdate {
	qcu.mutation.SetAnalytics(b)
	return qcu
}

// SetNillableAnalytics sets the "analytics" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableAnalytics(b *bool) *QRCodeUpdate {
	if b != nil {
		qcu.SetAnalytics(*b)
	}
	return qcu
}

// SetActive sets the "active" field.
func (qcu *QRCodeUpdate) SetActive(b bool) *QRCodeUpdate {
	qcu.mutation.SetActive(b)
	return qcu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableActive(b *bool) *QRCodeUpdate {
	if b != nil {
		qcu.SetActive(*b)
	}
	return qcu
}

// SetTags sets the "tags" field.
func (qcu *QRCodeUpdate) SetTags(s []string) *QRCodeUpdate {
	qcu.mutation.SetTags(s)
	return qcu
}

// AppendTags appends s to the "tags" field.
func (qcu *QRCodeUpdate) AppendTags(s []string) *QRCodeUpdate {
	qcu.mutation.AppendTags(s)
	return qcu
}

// ClearTags clears the value of the "tags" field.
func (qcu *QRCodeUpdate) ClearTags() *QRCodeUpdate {
	qcu.mutation.ClearTags()
	return qcu
}

// SetDesign sets the "design" field.
func (qcu *QRCodeUpdate) SetDesign(m map[string]interface{}) *QRCodeUpdate {
	qcu.mutation.SetDesign(m)
	return qcu
}

// ClearDesign clears the value of the "design" field.
func (qcu *QRCodeUpdate) ClearDesign() *QRCodeUpdate {
	qcu.mutation.ClearDesign()
	return qcu
}

// SetGroupID sets the "group_id" field.
func (qcu *QRCodeUpdate) SetGroupID(i int) *QRCodeUpdate {
	qcu.mutation.SetGroupID(i)
	return qcu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (qcu *QRCodeUpdate) SetNillableGroupID(i *int) *QRCodeUpdate {
	if i != nil {
		qcu.SetGroupID(*i)
	}
	return qcu
}

// ClearGroupID clears the value of the "group_id" field.
func (qcu *QRCodeUpdate) ClearGroupID() *QRCodeUpdate {
	qcu.mutation.ClearGroupID()
	return qcu
}

// AddFileRefIDs adds the "file_refs" edge to the FileReference entity by IDs.
func (qcu *QRCodeUpdate) AddFileRefIDs(ids ...int) *QRCodeUpdate {
	qcu.mutation.AddFileRefIDs(ids...)
	return qcu
}

// AddFileRefs adds the "file_refs" edges to the FileReference entity.
func (qcu *QRCodeUpdate) AddFileRefs(f ...*FileReference) *QRCodeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return qcu.AddFileRefIDs(ids...)
}

// SetGroup sets the "group" edge to the QRCodeGroup entity.
func (qcu *QRCodeUpdate) SetGroup(q *QRCodeGroup) *QRCodeUpdate {
	return qcu.SetGroupID(q.ID)
}

// AddAnalyticsRecordIDs adds the "analytics_records" edge to the QRCodeAnalytics entity by IDs.
func (qcu *QRCodeUpdate) AddAnalyticsRecordIDs(ids ...int) *QRCodeUpdate {
	qcu.mutation.AddAnalyticsRecordIDs(ids...)
	return qcu
}

// AddAnalyticsRecords adds the "analytics_records" edges to the QRCodeAnalytics entity.
func (qcu *QRCodeUpdate) AddAnalyticsRecords(q ...*QRCodeAnalytics) *QRCodeUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcu.AddAnalyticsRecordIDs(ids...)
}

// Mutation returns the QRCodeMutation object of the builder.
func (qcu *QRCodeUpdate) Mutation() *QRCodeMutation {
	return qcu.mutation
}

// ClearFileRefs clears all "file_refs" edges to the FileReference entity.
func (qcu *QRCodeUpdate) ClearFileRefs() *QRCodeUpdate {
	qcu.mutation.ClearFileRefs()
	return qcu
}

// RemoveFileRefIDs removes the "file_refs" edge to FileReference entities by IDs.
func (qcu *QRCodeUpdate) RemoveFileRefIDs(ids ...int) *QRCodeUpdate {
	qcu.mutation.RemoveFileRefIDs(ids...)
	return qcu
}

// RemoveFileRefs removes "file_refs" edges to FileReference entities.
func (qcu *QRCodeUpdate) RemoveFileRefs(f ...*FileReference) *QRCodeUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return qcu.RemoveFileRefIDs(ids...)
}

// ClearGroup clears the "group" edge to the QRCodeGroup entity.
func (qcu *QRCodeUpdate) ClearGroup() *QRCodeUpdate {
	qcu.mutation.ClearGroup()
	return qcu
}

// ClearAnalyticsRecords clears all "analytics_records" edges to the QRCodeAnalytics entity.
func (qcu *QRCodeUpdate) ClearAnalyticsRecords() *QRCodeUpdate {
	qcu.mutation.ClearAnalyticsRecords()
	return qcu
}

// RemoveAnalyticsRecordIDs removes the "analytics_records" edge to QRCodeAnalytics entities by IDs.
func (qcu *QRCodeUpdate) RemoveAnalyticsRecordIDs(ids ...int) *QRCodeUpdate {
	qcu.mutation.RemoveAnalyticsRecordIDs(ids...)
	return qcu
}

// RemoveAnalyticsRecords removes "analytics_records" edges to QRCodeAnalytics entities.
func (qcu *QRCodeUpdate) RemoveAnalyticsRecords(q ...*QRCodeAnalytics) *QRCodeUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcu.RemoveAnalyticsRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qcu *QRCodeUpdate) Save(ctx context.Context) (int, error) {
	qcu.defaults()
	return withHooks(ctx, qcu.sqlSave, qcu.mutation, qcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcu *QRCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := qcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qcu *QRCodeUpdate) Exec(ctx context.Context) error {
	_, err := qcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcu *QRCodeUpdate) ExecX(ctx context.Context) {
	if err := qcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcu *QRCodeUpdate) defaults() {
	if _, ok := qcu.mutation.UpdatedAt(); !ok {
		v := qrcode.UpdateDefaultUpdatedAt()
		qcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcu *QRCodeUpdate) check() error {
	if v, ok := qcu.mutation.GetType(); ok {
		if err := qrcode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "QRCode.type": %w`, err)}
		}
	}
	if v, ok := qcu.mutation.Title(); ok {
		if err := qrcode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "QRCode.title": %w`, err)}
		}
	}
	return nil
}

func (qcu *QRCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(qrcode.Table, qrcode.Columns, sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt))
	if ps := qcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcu.mutation.GetType(); ok {
		_spec.SetField(qrcode.FieldType, field.TypeString, value)
	}
	if value, ok := qcu.mutation.Title(); ok {
		_spec.SetField(qrcode.FieldTitle, field.TypeString, value)
	}
	if value, ok := qcu.mutation.Description(); ok {
		_spec.SetField(qrcode.FieldDescription, field.TypeString, value)
	}
	if qcu.mutation.DescriptionCleared() {
		_spec.ClearField(qrcode.FieldDescription, field.TypeString)
	}
	if value, ok := qcu.mutation.RedirectURL(); ok {
		_spec.SetField(qrcode.FieldRedirectURL, field.TypeString, value)
	}
	if qcu.mutation.RedirectURLCleared() {
		_spec.ClearField(qrcode.FieldRedirectURL, field.TypeString)
	}
	if value, ok := qcu.mutation.ShortURL(); ok {
		_spec.SetField(qrcode.FieldShortURL, field.TypeString, value)
	}
	if qcu.mutation.ShortURLCleared() {
		_spec.ClearField(qrcode.FieldShortURL, field.TypeString)
	}
	if value, ok := qcu.mutation.Content(); ok {
		_spec.SetField(qrcode.FieldContent, field.TypeJSON, value)
	}
	if value, ok := qcu.mutation.CreatedAt(); ok {
		_spec.SetField(qrcode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qcu.mutation.UpdatedAt(); ok {
		_spec.SetField(qrcode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qcu.mutation.ExpiresAt(); ok {
		_spec.SetField(qrcode.FieldExpiresAt, field.TypeTime, value)
	}
	if qcu.mutation.ExpiresAtCleared() {
		_spec.ClearField(qrcode.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := qcu.mutation.Analytics(); ok {
		_spec.SetField(qrcode.FieldAnalytics, field.TypeBool, value)
	}
	if value, ok := qcu.mutation.Active(); ok {
		_spec.SetField(qrcode.FieldActive, field.TypeBool, value)
	}
	if value, ok := qcu.mutation.Tags(); ok {
		_spec.SetField(qrcode.FieldTags, field.TypeJSON, value)
	}
	if value, ok := qcu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, qrcode.FieldTags, value)
		})
	}
	if qcu.mutation.TagsCleared() {
		_spec.ClearField(qrcode.FieldTags, field.TypeJSON)
	}
	if value, ok := qcu.mutation.Design(); ok {
		_spec.SetField(qrcode.FieldDesign, field.TypeJSON, value)
	}
	if qcu.mutation.DesignCleared() {
		_spec.ClearField(qrcode.FieldDesign, field.TypeJSON)
	}
	if qcu.mutation.FileRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.FileRefsTable,
			Columns: []string{qrcode.FileRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.RemovedFileRefsIDs(); len(nodes) > 0 && !qcu.mutation.FileRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.FileRefsTable,
			Columns: []string{qrcode.FileRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.FileRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.FileRefsTable,
			Columns: []string{qrcode.FileRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qcu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcode.GroupTable,
			Columns: []string{qrcode.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodegroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcode.GroupTable,
			Columns: []string{qrcode.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qcu.mutation.AnalyticsRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.AnalyticsRecordsTable,
			Columns: []string{qrcode.AnalyticsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.RemovedAnalyticsRecordsIDs(); len(nodes) > 0 && !qcu.mutation.AnalyticsRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.AnalyticsRecordsTable,
			Columns: []string{qrcode.AnalyticsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.AnalyticsRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.AnalyticsRecordsTable,
			Columns: []string{qrcode.AnalyticsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qcu.mutation.done = true
	return n, nil
}

// QRCodeUpdateOne is the builder for updating a single QRCode entity.
type QRCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QRCodeMutation
}

// SetType sets the "type" field.
func (qcuo *QRCodeUpdateOne) SetType(s string) *QRCodeUpdateOne {
	qcuo.mutation.SetType(s)
	return qcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableType(s *string) *QRCodeUpdateOne {
	if s != nil {
		qcuo.SetType(*s)
	}
	return qcuo
}

// SetTitle sets the "title" field.
func (qcuo *QRCodeUpdateOne) SetTitle(s string) *QRCodeUpdateOne {
	qcuo.mutation.SetTitle(s)
	return qcuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableTitle(s *string) *QRCodeUpdateOne {
	if s != nil {
		qcuo.SetTitle(*s)
	}
	return qcuo
}

// SetDescription sets the "description" field.
func (qcuo *QRCodeUpdateOne) SetDescription(s string) *QRCodeUpdateOne {
	qcuo.mutation.SetDescription(s)
	return qcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableDescription(s *string) *QRCodeUpdateOne {
	if s != nil {
		qcuo.SetDescription(*s)
	}
	return qcuo
}

// ClearDescription clears the value of the "description" field.
func (qcuo *QRCodeUpdateOne) ClearDescription() *QRCodeUpdateOne {
	qcuo.mutation.ClearDescription()
	return qcuo
}

// SetRedirectURL sets the "redirect_url" field.
func (qcuo *QRCodeUpdateOne) SetRedirectURL(s string) *QRCodeUpdateOne {
	qcuo.mutation.SetRedirectURL(s)
	return qcuo
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableRedirectURL(s *string) *QRCodeUpdateOne {
	if s != nil {
		qcuo.SetRedirectURL(*s)
	}
	return qcuo
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (qcuo *QRCodeUpdateOne) ClearRedirectURL() *QRCodeUpdateOne {
	qcuo.mutation.ClearRedirectURL()
	return qcuo
}

// SetShortURL sets the "short_url" field.
func (qcuo *QRCodeUpdateOne) SetShortURL(s string) *QRCodeUpdateOne {
	qcuo.mutation.SetShortURL(s)
	return qcuo
}

// SetNillableShortURL sets the "short_url" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableShortURL(s *string) *QRCodeUpdateOne {
	if s != nil {
		qcuo.SetShortURL(*s)
	}
	return qcuo
}

// ClearShortURL clears the value of the "short_url" field.
func (qcuo *QRCodeUpdateOne) ClearShortURL() *QRCodeUpdateOne {
	qcuo.mutation.ClearShortURL()
	return qcuo
}

// SetContent sets the "content" field.
func (qcuo *QRCodeUpdateOne) SetContent(m map[string]interface{}) *QRCodeUpdateOne {
	qcuo.mutation.SetContent(m)
	return qcuo
}

// SetCreatedAt sets the "created_at" field.
func (qcuo *QRCodeUpdateOne) SetCreatedAt(t time.Time) *QRCodeUpdateOne {
	qcuo.mutation.SetCreatedAt(t)
	return qcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableCreatedAt(t *time.Time) *QRCodeUpdateOne {
	if t != nil {
		qcuo.SetCreatedAt(*t)
	}
	return qcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (qcuo *QRCodeUpdateOne) SetUpdatedAt(t time.Time) *QRCodeUpdateOne {
	qcuo.mutation.SetUpdatedAt(t)
	return qcuo
}

// SetExpiresAt sets the "expires_at" field.
func (qcuo *QRCodeUpdateOne) SetExpiresAt(t time.Time) *QRCodeUpdateOne {
	qcuo.mutation.SetExpiresAt(t)
	return qcuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableExpiresAt(t *time.Time) *QRCodeUpdateOne {
	if t != nil {
		qcuo.SetExpiresAt(*t)
	}
	return qcuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (qcuo *QRCodeUpdateOne) ClearExpiresAt() *QRCodeUpdateOne {
	qcuo.mutation.ClearExpiresAt()
	return qcuo
}

// SetAnalytics sets the "analytics" field.
func (qcuo *QRCodeUpdateOne) SetAnalytics(b bool) *QRCodeUpdateOne {
	qcuo.mutation.SetAnalytics(b)
	return qcuo
}

// SetNillableAnalytics sets the "analytics" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableAnalytics(b *bool) *QRCodeUpdateOne {
	if b != nil {
		qcuo.SetAnalytics(*b)
	}
	return qcuo
}

// SetActive sets the "active" field.
func (qcuo *QRCodeUpdateOne) SetActive(b bool) *QRCodeUpdateOne {
	qcuo.mutation.SetActive(b)
	return qcuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableActive(b *bool) *QRCodeUpdateOne {
	if b != nil {
		qcuo.SetActive(*b)
	}
	return qcuo
}

// SetTags sets the "tags" field.
func (qcuo *QRCodeUpdateOne) SetTags(s []string) *QRCodeUpdateOne {
	qcuo.mutation.SetTags(s)
	return qcuo
}

// AppendTags appends s to the "tags" field.
func (qcuo *QRCodeUpdateOne) AppendTags(s []string) *QRCodeUpdateOne {
	qcuo.mutation.AppendTags(s)
	return qcuo
}

// ClearTags clears the value of the "tags" field.
func (qcuo *QRCodeUpdateOne) ClearTags() *QRCodeUpdateOne {
	qcuo.mutation.ClearTags()
	return qcuo
}

// SetDesign sets the "design" field.
func (qcuo *QRCodeUpdateOne) SetDesign(m map[string]interface{}) *QRCodeUpdateOne {
	qcuo.mutation.SetDesign(m)
	return qcuo
}

// ClearDesign clears the value of the "design" field.
func (qcuo *QRCodeUpdateOne) ClearDesign() *QRCodeUpdateOne {
	qcuo.mutation.ClearDesign()
	return qcuo
}

// SetGroupID sets the "group_id" field.
func (qcuo *QRCodeUpdateOne) SetGroupID(i int) *QRCodeUpdateOne {
	qcuo.mutation.SetGroupID(i)
	return qcuo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (qcuo *QRCodeUpdateOne) SetNillableGroupID(i *int) *QRCodeUpdateOne {
	if i != nil {
		qcuo.SetGroupID(*i)
	}
	return qcuo
}

// ClearGroupID clears the value of the "group_id" field.
func (qcuo *QRCodeUpdateOne) ClearGroupID() *QRCodeUpdateOne {
	qcuo.mutation.ClearGroupID()
	return qcuo
}

// AddFileRefIDs adds the "file_refs" edge to the FileReference entity by IDs.
func (qcuo *QRCodeUpdateOne) AddFileRefIDs(ids ...int) *QRCodeUpdateOne {
	qcuo.mutation.AddFileRefIDs(ids...)
	return qcuo
}

// AddFileRefs adds the "file_refs" edges to the FileReference entity.
func (qcuo *QRCodeUpdateOne) AddFileRefs(f ...*FileReference) *QRCodeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return qcuo.AddFileRefIDs(ids...)
}

// SetGroup sets the "group" edge to the QRCodeGroup entity.
func (qcuo *QRCodeUpdateOne) SetGroup(q *QRCodeGroup) *QRCodeUpdateOne {
	return qcuo.SetGroupID(q.ID)
}

// AddAnalyticsRecordIDs adds the "analytics_records" edge to the QRCodeAnalytics entity by IDs.
func (qcuo *QRCodeUpdateOne) AddAnalyticsRecordIDs(ids ...int) *QRCodeUpdateOne {
	qcuo.mutation.AddAnalyticsRecordIDs(ids...)
	return qcuo
}

// AddAnalyticsRecords adds the "analytics_records" edges to the QRCodeAnalytics entity.
func (qcuo *QRCodeUpdateOne) AddAnalyticsRecords(q ...*QRCodeAnalytics) *QRCodeUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcuo.AddAnalyticsRecordIDs(ids...)
}

// Mutation returns the QRCodeMutation object of the builder.
func (qcuo *QRCodeUpdateOne) Mutation() *QRCodeMutation {
	return qcuo.mutation
}

// ClearFileRefs clears all "file_refs" edges to the FileReference entity.
func (qcuo *QRCodeUpdateOne) ClearFileRefs() *QRCodeUpdateOne {
	qcuo.mutation.ClearFileRefs()
	return qcuo
}

// RemoveFileRefIDs removes the "file_refs" edge to FileReference entities by IDs.
func (qcuo *QRCodeUpdateOne) RemoveFileRefIDs(ids ...int) *QRCodeUpdateOne {
	qcuo.mutation.RemoveFileRefIDs(ids...)
	return qcuo
}

// RemoveFileRefs removes "file_refs" edges to FileReference entities.
func (qcuo *QRCodeUpdateOne) RemoveFileRefs(f ...*FileReference) *QRCodeUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return qcuo.RemoveFileRefIDs(ids...)
}

// ClearGroup clears the "group" edge to the QRCodeGroup entity.
func (qcuo *QRCodeUpdateOne) ClearGroup() *QRCodeUpdateOne {
	qcuo.mutation.ClearGroup()
	return qcuo
}

// ClearAnalyticsRecords clears all "analytics_records" edges to the QRCodeAnalytics entity.
func (qcuo *QRCodeUpdateOne) ClearAnalyticsRecords() *QRCodeUpdateOne {
	qcuo.mutation.ClearAnalyticsRecords()
	return qcuo
}

// RemoveAnalyticsRecordIDs removes the "analytics_records" edge to QRCodeAnalytics entities by IDs.
func (qcuo *QRCodeUpdateOne) RemoveAnalyticsRecordIDs(ids ...int) *QRCodeUpdateOne {
	qcuo.mutation.RemoveAnalyticsRecordIDs(ids...)
	return qcuo
}

// RemoveAnalyticsRecords removes "analytics_records" edges to QRCodeAnalytics entities.
func (qcuo *QRCodeUpdateOne) RemoveAnalyticsRecords(q ...*QRCodeAnalytics) *QRCodeUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcuo.RemoveAnalyticsRecordIDs(ids...)
}

// Where appends a list predicates to the QRCodeUpdate builder.
func (qcuo *QRCodeUpdateOne) Where(ps ...predicate.QRCode) *QRCodeUpdateOne {
	qcuo.mutation.Where(ps...)
	return qcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qcuo *QRCodeUpdateOne) Select(field string, fields ...string) *QRCodeUpdateOne {
	qcuo.fields = append([]string{field}, fields...)
	return qcuo
}

// Save executes the query and returns the updated QRCode entity.
func (qcuo *QRCodeUpdateOne) Save(ctx context.Context) (*QRCode, error) {
	qcuo.defaults()
	return withHooks(ctx, qcuo.sqlSave, qcuo.mutation, qcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcuo *QRCodeUpdateOne) SaveX(ctx context.Context) *QRCode {
	node, err := qcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qcuo *QRCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := qcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcuo *QRCodeUpdateOne) ExecX(ctx context.Context) {
	if err := qcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcuo *QRCodeUpdateOne) defaults() {
	if _, ok := qcuo.mutation.UpdatedAt(); !ok {
		v := qrcode.UpdateDefaultUpdatedAt()
		qcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcuo *QRCodeUpdateOne) check() error {
	if v, ok := qcuo.mutation.GetType(); ok {
		if err := qrcode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "QRCode.type": %w`, err)}
		}
	}
	if v, ok := qcuo.mutation.Title(); ok {
		if err := qrcode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "QRCode.title": %w`, err)}
		}
	}
	return nil
}

func (qcuo *QRCodeUpdateOne) sqlSave(ctx context.Context) (_node *QRCode, err error) {
	if err := qcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(qrcode.Table, qrcode.Columns, sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt))
	id, ok := qcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QRCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, qrcode.FieldID)
		for _, f := range fields {
			if !qrcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != qrcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcuo.mutation.GetType(); ok {
		_spec.SetField(qrcode.FieldType, field.TypeString, value)
	}
	if value, ok := qcuo.mutation.Title(); ok {
		_spec.SetField(qrcode.FieldTitle, field.TypeString, value)
	}
	if value, ok := qcuo.mutation.Description(); ok {
		_spec.SetField(qrcode.FieldDescription, field.TypeString, value)
	}
	if qcuo.mutation.DescriptionCleared() {
		_spec.ClearField(qrcode.FieldDescription, field.TypeString)
	}
	if value, ok := qcuo.mutation.RedirectURL(); ok {
		_spec.SetField(qrcode.FieldRedirectURL, field.TypeString, value)
	}
	if qcuo.mutation.RedirectURLCleared() {
		_spec.ClearField(qrcode.FieldRedirectURL, field.TypeString)
	}
	if value, ok := qcuo.mutation.ShortURL(); ok {
		_spec.SetField(qrcode.FieldShortURL, field.TypeString, value)
	}
	if qcuo.mutation.ShortURLCleared() {
		_spec.ClearField(qrcode.FieldShortURL, field.TypeString)
	}
	if value, ok := qcuo.mutation.Content(); ok {
		_spec.SetField(qrcode.FieldContent, field.TypeJSON, value)
	}
	if value, ok := qcuo.mutation.CreatedAt(); ok {
		_spec.SetField(qrcode.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(qrcode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qcuo.mutation.ExpiresAt(); ok {
		_spec.SetField(qrcode.FieldExpiresAt, field.TypeTime, value)
	}
	if qcuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(qrcode.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := qcuo.mutation.Analytics(); ok {
		_spec.SetField(qrcode.FieldAnalytics, field.TypeBool, value)
	}
	if value, ok := qcuo.mutation.Active(); ok {
		_spec.SetField(qrcode.FieldActive, field.TypeBool, value)
	}
	if value, ok := qcuo.mutation.Tags(); ok {
		_spec.SetField(qrcode.FieldTags, field.TypeJSON, value)
	}
	if value, ok := qcuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, qrcode.FieldTags, value)
		})
	}
	if qcuo.mutation.TagsCleared() {
		_spec.ClearField(qrcode.FieldTags, field.TypeJSON)
	}
	if value, ok := qcuo.mutation.Design(); ok {
		_spec.SetField(qrcode.FieldDesign, field.TypeJSON, value)
	}
	if qcuo.mutation.DesignCleared() {
		_spec.ClearField(qrcode.FieldDesign, field.TypeJSON)
	}
	if qcuo.mutation.FileRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.FileRefsTable,
			Columns: []string{qrcode.FileRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.RemovedFileRefsIDs(); len(nodes) > 0 && !qcuo.mutation.FileRefsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.FileRefsTable,
			Columns: []string{qrcode.FileRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.FileRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.FileRefsTable,
			Columns: []string{qrcode.FileRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qcuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcode.GroupTable,
			Columns: []string{qrcode.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodegroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcode.GroupTable,
			Columns: []string{qrcode.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qcuo.mutation.AnalyticsRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.AnalyticsRecordsTable,
			Columns: []string{qrcode.AnalyticsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.RemovedAnalyticsRecordsIDs(); len(nodes) > 0 && !qcuo.mutation.AnalyticsRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.AnalyticsRecordsTable,
			Columns: []string{qrcode.AnalyticsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.AnalyticsRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.AnalyticsRecordsTable,
			Columns: []string{qrcode.AnalyticsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QRCode{config: qcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qcuo.mutation.done = true
	return _node, nil
}

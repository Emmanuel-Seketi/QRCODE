// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"qr_backend/ent/predicate"
	"qr_backend/ent/qrcodegroup"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QRCodeGroupDelete is the builder for deleting a QRCodeGroup entity.
type QRCodeGroupDelete struct {
	config
	hooks    []Hook
	mutation *QRCodeGroupMutation
}

// Where appends a list predicates to the QRCodeGroupDelete builder.
func (qcgd *QRCodeGroupDelete) Where(ps ...predicate.QRCodeGroup) *QRCodeGroupDelete {
	qcgd.mutation.Where(ps...)
	return qcgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qcgd *QRCodeGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qcgd.sqlExec, qcgd.mutation, qcgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qcgd *QRCodeGroupDelete) ExecX(ctx context.Context) int {
	n, err := qcgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qcgd *QRCodeGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(qrcodegroup.Table, sqlgraph.NewFieldSpec(qrcodegroup.FieldID, field.TypeInt))
	if ps := qcgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qcgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qcgd.mutation.done = true
	return affected, err
}

// QRCodeGroupDeleteOne is the builder for deleting a single QRCodeGroup entity.
type QRCodeGroupDeleteOne struct {
	qcgd *QRCodeGroupDelete
}

// Where appends a list predicates to the QRCodeGroupDelete builder.
func (qcgdo *QRCodeGroupDeleteOne) Where(ps ...predicate.QRCodeGroup) *QRCodeGroupDeleteOne {
	qcgdo.qcgd.mutation.Where(ps...)
	return qcgdo
}

// Exec executes the deletion query.
func (qcgdo *QRCodeGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := qcgdo.qcgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{qrcodegroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qcgdo *QRCodeGroupDeleteOne) ExecX(ctx context.Context) {
	if err := qcgdo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"qr_backend/ent/qrcode"
	"qr_backend/ent/qrcodegroup"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// QRCode is the model entity for the QRCode schema.
type QRCode struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// RedirectURL holds the value of the "redirect_url" field.
	RedirectURL string `json:"redirect_url,omitempty"`
	// ShortURL holds the value of the "short_url" field.
	ShortURL string `json:"short_url,omitempty"`
	// Content holds the value of the "content" field.
	Content map[string]interface{} `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Analytics holds the value of the "analytics" field.
	Analytics bool `json:"analytics,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Design holds the value of the "design" field.
	Design map[string]interface{} `json:"design,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID *int `json:"group_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QRCodeQuery when eager-loading is set.
	Edges        QRCodeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QRCodeEdges holds the relations/edges for other nodes in the graph.
type QRCodeEdges struct {
	// FileRefs holds the value of the file_refs edge.
	FileRefs []*FileReference `json:"file_refs,omitempty"`
	// Group holds the value of the group edge.
	Group *QRCodeGroup `json:"group,omitempty"`
	// AnalyticsRecords holds the value of the analytics_records edge.
	AnalyticsRecords []*QRCodeAnalytics `json:"analytics_records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FileRefsOrErr returns the FileRefs value or an error if the edge
// was not loaded in eager-loading.
func (e QRCodeEdges) FileRefsOrErr() ([]*FileReference, error) {
	if e.loadedTypes[0] {
		return e.FileRefs, nil
	}
	return nil, &NotLoadedError{edge: "file_refs"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QRCodeEdges) GroupOrErr() (*QRCodeGroup, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: qrcodegroup.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// AnalyticsRecordsOrErr returns the AnalyticsRecords value or an error if the edge
// was not loaded in eager-loading.
func (e QRCodeEdges) AnalyticsRecordsOrErr() ([]*QRCodeAnalytics, error) {
	if e.loadedTypes[2] {
		return e.AnalyticsRecords, nil
	}
	return nil, &NotLoadedError{edge: "analytics_records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QRCode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case qrcode.FieldContent, qrcode.FieldTags, qrcode.FieldDesign:
			values[i] = new([]byte)
		case qrcode.FieldAnalytics, qrcode.FieldActive:
			values[i] = new(sql.NullBool)
		case qrcode.FieldID, qrcode.FieldGroupID:
			values[i] = new(sql.NullInt64)
		case qrcode.FieldType, qrcode.FieldTitle, qrcode.FieldDescription, qrcode.FieldRedirectURL, qrcode.FieldShortURL:
			values[i] = new(sql.NullString)
		case qrcode.FieldCreatedAt, qrcode.FieldUpdatedAt, qrcode.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QRCode fields.
func (qc *QRCode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case qrcode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qc.ID = int(value.Int64)
		case qrcode.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				qc.Type = value.String
			}
		case qrcode.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				qc.Title = value.String
			}
		case qrcode.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				qc.Description = value.String
			}
		case qrcode.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				qc.RedirectURL = value.String
			}
		case qrcode.FieldShortURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field short_url", values[i])
			} else if value.Valid {
				qc.ShortURL = value.String
			}
		case qrcode.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &qc.Content); err != nil {
					return fmt.Errorf("unmarshal field content: %w", err)
				}
			}
		case qrcode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				qc.CreatedAt = value.Time
			}
		case qrcode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				qc.UpdatedAt = value.Time
			}
		case qrcode.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				qc.ExpiresAt = new(time.Time)
				*qc.ExpiresAt = value.Time
			}
		case qrcode.FieldAnalytics:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field analytics", values[i])
			} else if value.Valid {
				qc.Analytics = value.Bool
			}
		case qrcode.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				qc.Active = value.Bool
			}
		case qrcode.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &qc.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case qrcode.FieldDesign:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field design", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &qc.Design); err != nil {
					return fmt.Errorf("unmarshal field design: %w", err)
				}
			}
		case qrcode.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				qc.GroupID = new(int)
				*qc.GroupID = int(value.Int64)
			}
		default:
			qc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QRCode.
// This includes values selected through modifiers, order, etc.
func (qc *QRCode) Value(name string) (ent.Value, error) {
	return qc.selectValues.Get(name)
}

// QueryFileRefs queries the "file_refs" edge of the QRCode entity.
func (qc *QRCode) QueryFileRefs() *FileReferenceQuery {
	return NewQRCodeClient(qc.config).QueryFileRefs(qc)
}

// QueryGroup queries the "group" edge of the QRCode entity.
func (qc *QRCode) QueryGroup() *QRCodeGroupQuery {
	return NewQRCodeClient(qc.config).QueryGroup(qc)
}

// QueryAnalyticsRecords queries the "analytics_records" edge of the QRCode entity.
func (qc *QRCode) QueryAnalyticsRecords() *QRCodeAnalyticsQuery {
	return NewQRCodeClient(qc.config).QueryAnalyticsRecords(qc)
}

// Update returns a builder for updating this QRCode.
// Note that you need to call QRCode.Unwrap() before calling this method if this QRCode
// was returned from a transaction, and the transaction was committed or rolled back.
func (qc *QRCode) Update() *QRCodeUpdateOne {
	return NewQRCodeClient(qc.config).UpdateOne(qc)
}

// Unwrap unwraps the QRCode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qc *QRCode) Unwrap() *QRCode {
	_tx, ok := qc.config.driver.(*txDriver)
	if !ok {
		panic("ent: QRCode is not a transactional entity")
	}
	qc.config.driver = _tx.drv
	return qc
}

// String implements the fmt.Stringer.
func (qc *QRCode) String() string {
	var builder strings.Builder
	builder.WriteString("QRCode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qc.ID))
	builder.WriteString("type=")
	builder.WriteString(qc.Type)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(qc.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(qc.Description)
	builder.WriteString(", ")
	builder.WriteString("redirect_url=")
	builder.WriteString(qc.RedirectURL)
	builder.WriteString(", ")
	builder.WriteString("short_url=")
	builder.WriteString(qc.ShortURL)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(fmt.Sprintf("%v", qc.Content))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(qc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(qc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := qc.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("analytics=")
	builder.WriteString(fmt.Sprintf("%v", qc.Analytics))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", qc.Active))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", qc.Tags))
	builder.WriteString(", ")
	builder.WriteString("design=")
	builder.WriteString(fmt.Sprintf("%v", qc.Design))
	builder.WriteString(", ")
	if v := qc.GroupID; v != nil {
		builder.WriteString("group_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// QRCodes is a parsable slice of QRCode.
type QRCodes []*QRCode

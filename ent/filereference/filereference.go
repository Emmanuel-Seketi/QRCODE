// Code generated by ent, DO NOT EDIT.

package filereference

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the filereference type in the database.
	Label = "file_reference"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// EdgeQrCode holds the string denoting the qr_code edge name in mutations.
	EdgeQrCode = "qr_code"
	// Table holds the table name of the filereference in the database.
	Table = "file_references"
	// QrCodeTable is the table that holds the qr_code relation/edge.
	QrCodeTable = "file_references"
	// QrCodeInverseTable is the table name for the QRCode entity.
	// It exists in this package in order to avoid circular dependency with the "qrcode" package.
	QrCodeInverseTable = "qr_codes"
	// QrCodeColumn is the table column denoting the qr_code relation/edge.
	QrCodeColumn = "qr_code_file_refs"
)

// Columns holds all SQL columns for filereference fields.
var Columns = []string{
	FieldID,
	FieldFilename,
	FieldURL,
	FieldSize,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "file_references"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"qr_code_file_refs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	FilenameValidator func(string) error
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func(string) error
)

// OrderOption defines the ordering options for the FileReference queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByQrCodeField orders the results by qr_code field.
func ByQrCodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQrCodeStep(), sql.OrderByField(field, opts...))
	}
}
func newQrCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QrCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QrCodeTable, QrCodeColumn),
	)
}

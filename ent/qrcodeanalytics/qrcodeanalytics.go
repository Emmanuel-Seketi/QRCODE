// Code generated by ent, DO NOT EDIT.

package qrcodeanalytics

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the qrcodeanalytics type in the database.
	Label = "qr_code_analytics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUserAgent holds the string denoting the user_agent field in the database.
	FieldUserAgent = "user_agent"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldDevice holds the string denoting the device field in the database.
	FieldDevice = "device"
	// FieldScannedAt holds the string denoting the scanned_at field in the database.
	FieldScannedAt = "scanned_at"
	// EdgeQrCode holds the string denoting the qr_code edge name in mutations.
	EdgeQrCode = "qr_code"
	// Table holds the table name of the qrcodeanalytics in the database.
	Table = "qr_code_analytics"
	// QrCodeTable is the table that holds the qr_code relation/edge.
	QrCodeTable = "qr_code_analytics"
	// QrCodeInverseTable is the table name for the QRCode entity.
	// It exists in this package in order to avoid circular dependency with the "qrcode" package.
	QrCodeInverseTable = "qr_codes"
	// QrCodeColumn is the table column denoting the qr_code relation/edge.
	QrCodeColumn = "qr_code_analytics_records"
)

// Columns holds all SQL columns for qrcodeanalytics fields.
var Columns = []string{
	FieldID,
	FieldIPAddress,
	FieldUserAgent,
	FieldLocation,
	FieldDevice,
	FieldScannedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "qr_code_analytics"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"qr_code_analytics_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultScannedAt holds the default value on creation for the "scanned_at" field.
	DefaultScannedAt func() time.Time
)

// OrderOption defines the ordering options for the QRCodeAnalytics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUserAgent orders the results by the user_agent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByDevice orders the results by the device field.
func ByDevice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDevice, opts...).ToFunc()
}

// ByScannedAt orders the results by the scanned_at field.
func ByScannedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScannedAt, opts...).ToFunc()
}

// ByQrCodeField orders the results by qr_code field.
func ByQrCodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQrCodeStep(), sql.OrderByField(field, opts...))
	}
}
func newQrCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QrCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QrCodeTable, QrCodeColumn),
	)
}

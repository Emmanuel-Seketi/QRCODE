// Code generated by ent, DO NOT EDIT.

package qrcode

import (
	"qr_backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldType, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldDescription, v))
}

// RedirectURL applies equality check predicate on the "redirect_url" field. It's identical to RedirectURLEQ.
func RedirectURL(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldRedirectURL, v))
}

// ShortURL applies equality check predicate on the "short_url" field. It's identical to ShortURLEQ.
func ShortURL(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldShortURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldUpdatedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldExpiresAt, v))
}

// Analytics applies equality check predicate on the "analytics" field. It's identical to AnalyticsEQ.
func Analytics(v bool) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldAnalytics, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldActive, v))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v int) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldGroupID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContainsFold(FieldType, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContainsFold(FieldDescription, v))
}

// RedirectURLEQ applies the EQ predicate on the "redirect_url" field.
func RedirectURLEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldRedirectURL, v))
}

// RedirectURLNEQ applies the NEQ predicate on the "redirect_url" field.
func RedirectURLNEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldRedirectURL, v))
}

// RedirectURLIn applies the In predicate on the "redirect_url" field.
func RedirectURLIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldRedirectURL, vs...))
}

// RedirectURLNotIn applies the NotIn predicate on the "redirect_url" field.
func RedirectURLNotIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldRedirectURL, vs...))
}

// RedirectURLGT applies the GT predicate on the "redirect_url" field.
func RedirectURLGT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldRedirectURL, v))
}

// RedirectURLGTE applies the GTE predicate on the "redirect_url" field.
func RedirectURLGTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldRedirectURL, v))
}

// RedirectURLLT applies the LT predicate on the "redirect_url" field.
func RedirectURLLT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldRedirectURL, v))
}

// RedirectURLLTE applies the LTE predicate on the "redirect_url" field.
func RedirectURLLTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldRedirectURL, v))
}

// RedirectURLContains applies the Contains predicate on the "redirect_url" field.
func RedirectURLContains(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContains(FieldRedirectURL, v))
}

// RedirectURLHasPrefix applies the HasPrefix predicate on the "redirect_url" field.
func RedirectURLHasPrefix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasPrefix(FieldRedirectURL, v))
}

// RedirectURLHasSuffix applies the HasSuffix predicate on the "redirect_url" field.
func RedirectURLHasSuffix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasSuffix(FieldRedirectURL, v))
}

// RedirectURLIsNil applies the IsNil predicate on the "redirect_url" field.
func RedirectURLIsNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldIsNull(FieldRedirectURL))
}

// RedirectURLNotNil applies the NotNil predicate on the "redirect_url" field.
func RedirectURLNotNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldNotNull(FieldRedirectURL))
}

// RedirectURLEqualFold applies the EqualFold predicate on the "redirect_url" field.
func RedirectURLEqualFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEqualFold(FieldRedirectURL, v))
}

// RedirectURLContainsFold applies the ContainsFold predicate on the "redirect_url" field.
func RedirectURLContainsFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContainsFold(FieldRedirectURL, v))
}

// ShortURLEQ applies the EQ predicate on the "short_url" field.
func ShortURLEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldShortURL, v))
}

// ShortURLNEQ applies the NEQ predicate on the "short_url" field.
func ShortURLNEQ(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldShortURL, v))
}

// ShortURLIn applies the In predicate on the "short_url" field.
func ShortURLIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldShortURL, vs...))
}

// ShortURLNotIn applies the NotIn predicate on the "short_url" field.
func ShortURLNotIn(vs ...string) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldShortURL, vs...))
}

// ShortURLGT applies the GT predicate on the "short_url" field.
func ShortURLGT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldShortURL, v))
}

// ShortURLGTE applies the GTE predicate on the "short_url" field.
func ShortURLGTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldShortURL, v))
}

// ShortURLLT applies the LT predicate on the "short_url" field.
func ShortURLLT(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldShortURL, v))
}

// ShortURLLTE applies the LTE predicate on the "short_url" field.
func ShortURLLTE(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldShortURL, v))
}

// ShortURLContains applies the Contains predicate on the "short_url" field.
func ShortURLContains(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContains(FieldShortURL, v))
}

// ShortURLHasPrefix applies the HasPrefix predicate on the "short_url" field.
func ShortURLHasPrefix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasPrefix(FieldShortURL, v))
}

// ShortURLHasSuffix applies the HasSuffix predicate on the "short_url" field.
func ShortURLHasSuffix(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldHasSuffix(FieldShortURL, v))
}

// ShortURLIsNil applies the IsNil predicate on the "short_url" field.
func ShortURLIsNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldIsNull(FieldShortURL))
}

// ShortURLNotNil applies the NotNil predicate on the "short_url" field.
func ShortURLNotNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldNotNull(FieldShortURL))
}

// ShortURLEqualFold applies the EqualFold predicate on the "short_url" field.
func ShortURLEqualFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldEqualFold(FieldShortURL, v))
}

// ShortURLContainsFold applies the ContainsFold predicate on the "short_url" field.
func ShortURLContainsFold(v string) predicate.QRCode {
	return predicate.QRCode(sql.FieldContainsFold(FieldShortURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldUpdatedAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.QRCode {
	return predicate.QRCode(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldNotNull(FieldExpiresAt))
}

// AnalyticsEQ applies the EQ predicate on the "analytics" field.
func AnalyticsEQ(v bool) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldAnalytics, v))
}

// AnalyticsNEQ applies the NEQ predicate on the "analytics" field.
func AnalyticsNEQ(v bool) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldAnalytics, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldActive, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldNotNull(FieldTags))
}

// DesignIsNil applies the IsNil predicate on the "design" field.
func DesignIsNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldIsNull(FieldDesign))
}

// DesignNotNil applies the NotNil predicate on the "design" field.
func DesignNotNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldNotNull(FieldDesign))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v int) predicate.QRCode {
	return predicate.QRCode(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v int) predicate.QRCode {
	return predicate.QRCode(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...int) predicate.QRCode {
	return predicate.QRCode(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...int) predicate.QRCode {
	return predicate.QRCode(sql.FieldNotIn(FieldGroupID, vs...))
}

// GroupIDIsNil applies the IsNil predicate on the "group_id" field.
func GroupIDIsNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldIsNull(FieldGroupID))
}

// GroupIDNotNil applies the NotNil predicate on the "group_id" field.
func GroupIDNotNil() predicate.QRCode {
	return predicate.QRCode(sql.FieldNotNull(FieldGroupID))
}

// HasFileRefs applies the HasEdge predicate on the "file_refs" edge.
func HasFileRefs() predicate.QRCode {
	return predicate.QRCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FileRefsTable, FileRefsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileRefsWith applies the HasEdge predicate on the "file_refs" edge with a given conditions (other predicates).
func HasFileRefsWith(preds ...predicate.FileReference) predicate.QRCode {
	return predicate.QRCode(func(s *sql.Selector) {
		step := newFileRefsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.QRCode {
	return predicate.QRCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.QRCodeGroup) predicate.QRCode {
	return predicate.QRCode(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnalyticsRecords applies the HasEdge predicate on the "analytics_records" edge.
func HasAnalyticsRecords() predicate.QRCode {
	return predicate.QRCode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnalyticsRecordsTable, AnalyticsRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnalyticsRecordsWith applies the HasEdge predicate on the "analytics_records" edge with a given conditions (other predicates).
func HasAnalyticsRecordsWith(preds ...predicate.QRCodeAnalytics) predicate.QRCode {
	return predicate.QRCode(func(s *sql.Selector) {
		step := newAnalyticsRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QRCode) predicate.QRCode {
	return predicate.QRCode(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QRCode) predicate.QRCode {
	return predicate.QRCode(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QRCode) predicate.QRCode {
	return predicate.QRCode(sql.NotPredicates(p))
}

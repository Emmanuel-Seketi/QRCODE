// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qr_backend/ent/predicate"
	"qr_backend/ent/qrcode"
	"qr_backend/ent/qrcodeanalytics"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QRCodeAnalyticsUpdate is the builder for updating QRCodeAnalytics entities.
type QRCodeAnalyticsUpdate struct {
	config
	hooks    []Hook
	mutation *QRCodeAnalyticsMutation
}

// Where appends a list predicates to the QRCodeAnalyticsUpdate builder.
func (qcau *QRCodeAnalyticsUpdate) Where(ps ...predicate.QRCodeAnalytics) *QRCodeAnalyticsUpdate {
	qcau.mutation.Where(ps...)
	return qcau
}

// SetIPAddress sets the "ip_address" field.
func (qcau *QRCodeAnalyticsUpdate) SetIPAddress(s string) *QRCodeAnalyticsUpdate {
	qcau.mutation.SetIPAddress(s)
	return qcau
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (qcau *QRCodeAnalyticsUpdate) SetNillableIPAddress(s *string) *QRCodeAnalyticsUpdate {
	if s != nil {
		qcau.SetIPAddress(*s)
	}
	return qcau
}

// SetUserAgent sets the "user_agent" field.
func (qcau *QRCodeAnalyticsUpdate) SetUserAgent(s string) *QRCodeAnalyticsUpdate {
	qcau.mutation.SetUserAgent(s)
	return qcau
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (qcau *QRCodeAnalyticsUpdate) SetNillableUserAgent(s *string) *QRCodeAnalyticsUpdate {
	if s != nil {
		qcau.SetUserAgent(*s)
	}
	return qcau
}

// SetLocation sets the "location" field.
func (qcau *QRCodeAnalyticsUpdate) SetLocation(s string) *QRCodeAnalyticsUpdate {
	qcau.mutation.SetLocation(s)
	return qcau
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (qcau *QRCodeAnalyticsUpdate) SetNillableLocation(s *string) *QRCodeAnalyticsUpdate {
	if s != nil {
		qcau.SetLocation(*s)
	}
	return qcau
}

// ClearLocation clears the value of the "location" field.
func (qcau *QRCodeAnalyticsUpdate) ClearLocation() *QRCodeAnalyticsUpdate {
	qcau.mutation.ClearLocation()
	return qcau
}

// SetDevice sets the "device" field.
func (qcau *QRCodeAnalyticsUpdate) SetDevice(s string) *QRCodeAnalyticsUpdate {
	qcau.mutation.SetDevice(s)
	return qcau
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (qcau *QRCodeAnalyticsUpdate) SetNillableDevice(s *string) *QRCodeAnalyticsUpdate {
	if s != nil {
		qcau.SetDevice(*s)
	}
	return qcau
}

// ClearDevice clears the value of the "device" field.
func (qcau *QRCodeAnalyticsUpdate) ClearDevice() *QRCodeAnalyticsUpdate {
	qcau.mutation.ClearDevice()
	return qcau
}

// SetScannedAt sets the "scanned_at" field.
func (qcau *QRCodeAnalyticsUpdate) SetScannedAt(t time.Time) *QRCodeAnalyticsUpdate {
	qcau.mutation.SetScannedAt(t)
	return qcau
}

// SetNillableScannedAt sets the "scanned_at" field if the given value is not nil.
func (qcau *QRCodeAnalyticsUpdate) SetNillableScannedAt(t *time.Time) *QRCodeAnalyticsUpdate {
	if t != nil {
		qcau.SetScannedAt(*t)
	}
	return qcau
}

// SetQrCodeID sets the "qr_code" edge to the QRCode entity by ID.
func (qcau *QRCodeAnalyticsUpdate) SetQrCodeID(id int) *QRCodeAnalyticsUpdate {
	qcau.mutation.SetQrCodeID(id)
	return qcau
}

// SetNillableQrCodeID sets the "qr_code" edge to the QRCode entity by ID if the given value is not nil.
func (qcau *QRCodeAnalyticsUpdate) SetNillableQrCodeID(id *int) *QRCodeAnalyticsUpdate {
	if id != nil {
		qcau = qcau.SetQrCodeID(*id)
	}
	return qcau
}

// SetQrCode sets the "qr_code" edge to the QRCode entity.
func (qcau *QRCodeAnalyticsUpdate) SetQrCode(q *QRCode) *QRCodeAnalyticsUpdate {
	return qcau.SetQrCodeID(q.ID)
}

// Mutation returns the QRCodeAnalyticsMutation object of the builder.
func (qcau *QRCodeAnalyticsUpdate) Mutation() *QRCodeAnalyticsMutation {
	return qcau.mutation
}

// ClearQrCode clears the "qr_code" edge to the QRCode entity.
func (qcau *QRCodeAnalyticsUpdate) ClearQrCode() *QRCodeAnalyticsUpdate {
	qcau.mutation.ClearQrCode()
	return qcau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qcau *QRCodeAnalyticsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qcau.sqlSave, qcau.mutation, qcau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcau *QRCodeAnalyticsUpdate) SaveX(ctx context.Context) int {
	affected, err := qcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qcau *QRCodeAnalyticsUpdate) Exec(ctx context.Context) error {
	_, err := qcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcau *QRCodeAnalyticsUpdate) ExecX(ctx context.Context) {
	if err := qcau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qcau *QRCodeAnalyticsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(qrcodeanalytics.Table, qrcodeanalytics.Columns, sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt))
	if ps := qcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcau.mutation.IPAddress(); ok {
		_spec.SetField(qrcodeanalytics.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := qcau.mutation.UserAgent(); ok {
		_spec.SetField(qrcodeanalytics.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := qcau.mutation.Location(); ok {
		_spec.SetField(qrcodeanalytics.FieldLocation, field.TypeString, value)
	}
	if qcau.mutation.LocationCleared() {
		_spec.ClearField(qrcodeanalytics.FieldLocation, field.TypeString)
	}
	if value, ok := qcau.mutation.Device(); ok {
		_spec.SetField(qrcodeanalytics.FieldDevice, field.TypeString, value)
	}
	if qcau.mutation.DeviceCleared() {
		_spec.ClearField(qrcodeanalytics.FieldDevice, field.TypeString)
	}
	if value, ok := qcau.mutation.ScannedAt(); ok {
		_spec.SetField(qrcodeanalytics.FieldScannedAt, field.TypeTime, value)
	}
	if qcau.mutation.QrCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcodeanalytics.QrCodeTable,
			Columns: []string{qrcodeanalytics.QrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcau.mutation.QrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcodeanalytics.QrCodeTable,
			Columns: []string{qrcodeanalytics.QrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrcodeanalytics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qcau.mutation.done = true
	return n, nil
}

// QRCodeAnalyticsUpdateOne is the builder for updating a single QRCodeAnalytics entity.
type QRCodeAnalyticsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QRCodeAnalyticsMutation
}

// SetIPAddress sets the "ip_address" field.
func (qcauo *QRCodeAnalyticsUpdateOne) SetIPAddress(s string) *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.SetIPAddress(s)
	return qcauo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (qcauo *QRCodeAnalyticsUpdateOne) SetNillableIPAddress(s *string) *QRCodeAnalyticsUpdateOne {
	if s != nil {
		qcauo.SetIPAddress(*s)
	}
	return qcauo
}

// SetUserAgent sets the "user_agent" field.
func (qcauo *QRCodeAnalyticsUpdateOne) SetUserAgent(s string) *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.SetUserAgent(s)
	return qcauo
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (qcauo *QRCodeAnalyticsUpdateOne) SetNillableUserAgent(s *string) *QRCodeAnalyticsUpdateOne {
	if s != nil {
		qcauo.SetUserAgent(*s)
	}
	return qcauo
}

// SetLocation sets the "location" field.
func (qcauo *QRCodeAnalyticsUpdateOne) SetLocation(s string) *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.SetLocation(s)
	return qcauo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (qcauo *QRCodeAnalyticsUpdateOne) SetNillableLocation(s *string) *QRCodeAnalyticsUpdateOne {
	if s != nil {
		qcauo.SetLocation(*s)
	}
	return qcauo
}

// ClearLocation clears the value of the "location" field.
func (qcauo *QRCodeAnalyticsUpdateOne) ClearLocation() *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.ClearLocation()
	return qcauo
}

// SetDevice sets the "device" field.
func (qcauo *QRCodeAnalyticsUpdateOne) SetDevice(s string) *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.SetDevice(s)
	return qcauo
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (qcauo *QRCodeAnalyticsUpdateOne) SetNillableDevice(s *string) *QRCodeAnalyticsUpdateOne {
	if s != nil {
		qcauo.SetDevice(*s)
	}
	return qcauo
}

// ClearDevice clears the value of the "device" field.
func (qcauo *QRCodeAnalyticsUpdateOne) ClearDevice() *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.ClearDevice()
	return qcauo
}

// SetScannedAt sets the "scanned_at" field.
func (qcauo *QRCodeAnalyticsUpdateOne) SetScannedAt(t time.Time) *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.SetScannedAt(t)
	return qcauo
}

// SetNillableScannedAt sets the "scanned_at" field if the given value is not nil.
func (qcauo *QRCodeAnalyticsUpdateOne) SetNillableScannedAt(t *time.Time) *QRCodeAnalyticsUpdateOne {
	if t != nil {
		qcauo.SetScannedAt(*t)
	}
	return qcauo
}

// SetQrCodeID sets the "qr_code" edge to the QRCode entity by ID.
func (qcauo *QRCodeAnalyticsUpdateOne) SetQrCodeID(id int) *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.SetQrCodeID(id)
	return qcauo
}

// SetNillableQrCodeID sets the "qr_code" edge to the QRCode entity by ID if the given value is not nil.
func (qcauo *QRCodeAnalyticsUpdateOne) SetNillableQrCodeID(id *int) *QRCodeAnalyticsUpdateOne {
	if id != nil {
		qcauo = qcauo.SetQrCodeID(*id)
	}
	return qcauo
}

// SetQrCode sets the "qr_code" edge to the QRCode entity.
func (qcauo *QRCodeAnalyticsUpdateOne) SetQrCode(q *QRCode) *QRCodeAnalyticsUpdateOne {
	return qcauo.SetQrCodeID(q.ID)
}

// Mutation returns the QRCodeAnalyticsMutation object of the builder.
func (qcauo *QRCodeAnalyticsUpdateOne) Mutation() *QRCodeAnalyticsMutation {
	return qcauo.mutation
}

// ClearQrCode clears the "qr_code" edge to the QRCode entity.
func (qcauo *QRCodeAnalyticsUpdateOne) ClearQrCode() *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.ClearQrCode()
	return qcauo
}

// Where appends a list predicates to the QRCodeAnalyticsUpdate builder.
func (qcauo *QRCodeAnalyticsUpdateOne) Where(ps ...predicate.QRCodeAnalytics) *QRCodeAnalyticsUpdateOne {
	qcauo.mutation.Where(ps...)
	return qcauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qcauo *QRCodeAnalyticsUpdateOne) Select(field string, fields ...string) *QRCodeAnalyticsUpdateOne {
	qcauo.fields = append([]string{field}, fields...)
	return qcauo
}

// Save executes the query and returns the updated QRCodeAnalytics entity.
func (qcauo *QRCodeAnalyticsUpdateOne) Save(ctx context.Context) (*QRCodeAnalytics, error) {
	return withHooks(ctx, qcauo.sqlSave, qcauo.mutation, qcauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcauo *QRCodeAnalyticsUpdateOne) SaveX(ctx context.Context) *QRCodeAnalytics {
	node, err := qcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qcauo *QRCodeAnalyticsUpdateOne) Exec(ctx context.Context) error {
	_, err := qcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcauo *QRCodeAnalyticsUpdateOne) ExecX(ctx context.Context) {
	if err := qcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qcauo *QRCodeAnalyticsUpdateOne) sqlSave(ctx context.Context) (_node *QRCodeAnalytics, err error) {
	_spec := sqlgraph.NewUpdateSpec(qrcodeanalytics.Table, qrcodeanalytics.Columns, sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt))
	id, ok := qcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QRCodeAnalytics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, qrcodeanalytics.FieldID)
		for _, f := range fields {
			if !qrcodeanalytics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != qrcodeanalytics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcauo.mutation.IPAddress(); ok {
		_spec.SetField(qrcodeanalytics.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := qcauo.mutation.UserAgent(); ok {
		_spec.SetField(qrcodeanalytics.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := qcauo.mutation.Location(); ok {
		_spec.SetField(qrcodeanalytics.FieldLocation, field.TypeString, value)
	}
	if qcauo.mutation.LocationCleared() {
		_spec.ClearField(qrcodeanalytics.FieldLocation, field.TypeString)
	}
	if value, ok := qcauo.mutation.Device(); ok {
		_spec.SetField(qrcodeanalytics.FieldDevice, field.TypeString, value)
	}
	if qcauo.mutation.DeviceCleared() {
		_spec.ClearField(qrcodeanalytics.FieldDevice, field.TypeString)
	}
	if value, ok := qcauo.mutation.ScannedAt(); ok {
		_spec.SetField(qrcodeanalytics.FieldScannedAt, field.TypeTime, value)
	}
	if qcauo.mutation.QrCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcodeanalytics.QrCodeTable,
			Columns: []string{qrcodeanalytics.QrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcauo.mutation.QrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcodeanalytics.QrCodeTable,
			Columns: []string{qrcodeanalytics.QrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QRCodeAnalytics{config: qcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrcodeanalytics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qcauo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"qr_backend/ent/qrcode"
	"qr_backend/ent/qrcodeanalytics"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// QRCodeAnalytics is the model entity for the QRCodeAnalytics schema.
type QRCodeAnalytics struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// UserAgent holds the value of the "user_agent" field.
	UserAgent string `json:"user_agent,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Device holds the value of the "device" field.
	Device string `json:"device,omitempty"`
	// ScannedAt holds the value of the "scanned_at" field.
	ScannedAt time.Time `json:"scanned_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QRCodeAnalyticsQuery when eager-loading is set.
	Edges                     QRCodeAnalyticsEdges `json:"edges"`
	qr_code_analytics_records *int
	selectValues              sql.SelectValues
}

// QRCodeAnalyticsEdges holds the relations/edges for other nodes in the graph.
type QRCodeAnalyticsEdges struct {
	// QrCode holds the value of the qr_code edge.
	QrCode *QRCode `json:"qr_code,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QrCodeOrErr returns the QrCode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QRCodeAnalyticsEdges) QrCodeOrErr() (*QRCode, error) {
	if e.QrCode != nil {
		return e.QrCode, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: qrcode.Label}
	}
	return nil, &NotLoadedError{edge: "qr_code"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QRCodeAnalytics) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case qrcodeanalytics.FieldID:
			values[i] = new(sql.NullInt64)
		case qrcodeanalytics.FieldIPAddress, qrcodeanalytics.FieldUserAgent, qrcodeanalytics.FieldLocation, qrcodeanalytics.FieldDevice:
			values[i] = new(sql.NullString)
		case qrcodeanalytics.FieldScannedAt:
			values[i] = new(sql.NullTime)
		case qrcodeanalytics.ForeignKeys[0]: // qr_code_analytics_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QRCodeAnalytics fields.
func (qca *QRCodeAnalytics) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case qrcodeanalytics.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qca.ID = int(value.Int64)
		case qrcodeanalytics.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				qca.IPAddress = value.String
			}
		case qrcodeanalytics.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				qca.UserAgent = value.String
			}
		case qrcodeanalytics.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				qca.Location = value.String
			}
		case qrcodeanalytics.FieldDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device", values[i])
			} else if value.Valid {
				qca.Device = value.String
			}
		case qrcodeanalytics.FieldScannedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scanned_at", values[i])
			} else if value.Valid {
				qca.ScannedAt = value.Time
			}
		case qrcodeanalytics.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field qr_code_analytics_records", value)
			} else if value.Valid {
				qca.qr_code_analytics_records = new(int)
				*qca.qr_code_analytics_records = int(value.Int64)
			}
		default:
			qca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the QRCodeAnalytics.
// This includes values selected through modifiers, order, etc.
func (qca *QRCodeAnalytics) Value(name string) (ent.Value, error) {
	return qca.selectValues.Get(name)
}

// QueryQrCode queries the "qr_code" edge of the QRCodeAnalytics entity.
func (qca *QRCodeAnalytics) QueryQrCode() *QRCodeQuery {
	return NewQRCodeAnalyticsClient(qca.config).QueryQrCode(qca)
}

// Update returns a builder for updating this QRCodeAnalytics.
// Note that you need to call QRCodeAnalytics.Unwrap() before calling this method if this QRCodeAnalytics
// was returned from a transaction, and the transaction was committed or rolled back.
func (qca *QRCodeAnalytics) Update() *QRCodeAnalyticsUpdateOne {
	return NewQRCodeAnalyticsClient(qca.config).UpdateOne(qca)
}

// Unwrap unwraps the QRCodeAnalytics entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qca *QRCodeAnalytics) Unwrap() *QRCodeAnalytics {
	_tx, ok := qca.config.driver.(*txDriver)
	if !ok {
		panic("ent: QRCodeAnalytics is not a transactional entity")
	}
	qca.config.driver = _tx.drv
	return qca
}

// String implements the fmt.Stringer.
func (qca *QRCodeAnalytics) String() string {
	var builder strings.Builder
	builder.WriteString("QRCodeAnalytics(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qca.ID))
	builder.WriteString("ip_address=")
	builder.WriteString(qca.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(qca.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(qca.Location)
	builder.WriteString(", ")
	builder.WriteString("device=")
	builder.WriteString(qca.Device)
	builder.WriteString(", ")
	builder.WriteString("scanned_at=")
	builder.WriteString(qca.ScannedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QRCodeAnalyticsSlice is a parsable slice of QRCodeAnalytics.
type QRCodeAnalyticsSlice []*QRCodeAnalytics

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qr_backend/ent/filereference"
	"qr_backend/ent/qrcode"
	"qr_backend/ent/qrcodeanalytics"
	"qr_backend/ent/qrcodegroup"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QRCodeCreate is the builder for creating a QRCode entity.
type QRCodeCreate struct {
	config
	mutation *QRCodeMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (qcc *QRCodeCreate) SetType(s string) *QRCodeCreate {
	qcc.mutation.SetType(s)
	return qcc
}

// SetTitle sets the "title" field.
func (qcc *QRCodeCreate) SetTitle(s string) *QRCodeCreate {
	qcc.mutation.SetTitle(s)
	return qcc
}

// SetDescription sets the "description" field.
func (qcc *QRCodeCreate) SetDescription(s string) *QRCodeCreate {
	qcc.mutation.SetDescription(s)
	return qcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableDescription(s *string) *QRCodeCreate {
	if s != nil {
		qcc.SetDescription(*s)
	}
	return qcc
}

// SetRedirectURL sets the "redirect_url" field.
func (qcc *QRCodeCreate) SetRedirectURL(s string) *QRCodeCreate {
	qcc.mutation.SetRedirectURL(s)
	return qcc
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableRedirectURL(s *string) *QRCodeCreate {
	if s != nil {
		qcc.SetRedirectURL(*s)
	}
	return qcc
}

// SetShortURL sets the "short_url" field.
func (qcc *QRCodeCreate) SetShortURL(s string) *QRCodeCreate {
	qcc.mutation.SetShortURL(s)
	return qcc
}

// SetNillableShortURL sets the "short_url" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableShortURL(s *string) *QRCodeCreate {
	if s != nil {
		qcc.SetShortURL(*s)
	}
	return qcc
}

// SetContent sets the "content" field.
func (qcc *QRCodeCreate) SetContent(m map[string]interface{}) *QRCodeCreate {
	qcc.mutation.SetContent(m)
	return qcc
}

// SetCreatedAt sets the "created_at" field.
func (qcc *QRCodeCreate) SetCreatedAt(t time.Time) *QRCodeCreate {
	qcc.mutation.SetCreatedAt(t)
	return qcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableCreatedAt(t *time.Time) *QRCodeCreate {
	if t != nil {
		qcc.SetCreatedAt(*t)
	}
	return qcc
}

// SetUpdatedAt sets the "updated_at" field.
func (qcc *QRCodeCreate) SetUpdatedAt(t time.Time) *QRCodeCreate {
	qcc.mutation.SetUpdatedAt(t)
	return qcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableUpdatedAt(t *time.Time) *QRCodeCreate {
	if t != nil {
		qcc.SetUpdatedAt(*t)
	}
	return qcc
}

// SetExpiresAt sets the "expires_at" field.
func (qcc *QRCodeCreate) SetExpiresAt(t time.Time) *QRCodeCreate {
	qcc.mutation.SetExpiresAt(t)
	return qcc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableExpiresAt(t *time.Time) *QRCodeCreate {
	if t != nil {
		qcc.SetExpiresAt(*t)
	}
	return qcc
}

// SetAnalytics sets the "analytics" field.
func (qcc *QRCodeCreate) SetAnalytics(b bool) *QRCodeCreate {
	qcc.mutation.SetAnalytics(b)
	return qcc
}

// SetNillableAnalytics sets the "analytics" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableAnalytics(b *bool) *QRCodeCreate {
	if b != nil {
		qcc.SetAnalytics(*b)
	}
	return qcc
}

// SetActive sets the "active" field.
func (qcc *QRCodeCreate) SetActive(b bool) *QRCodeCreate {
	qcc.mutation.SetActive(b)
	return qcc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableActive(b *bool) *QRCodeCreate {
	if b != nil {
		qcc.SetActive(*b)
	}
	return qcc
}

// SetTags sets the "tags" field.
func (qcc *QRCodeCreate) SetTags(s []string) *QRCodeCreate {
	qcc.mutation.SetTags(s)
	return qcc
}

// SetDesign sets the "design" field.
func (qcc *QRCodeCreate) SetDesign(m map[string]interface{}) *QRCodeCreate {
	qcc.mutation.SetDesign(m)
	return qcc
}

// SetGroupID sets the "group_id" field.
func (qcc *QRCodeCreate) SetGroupID(i int) *QRCodeCreate {
	qcc.mutation.SetGroupID(i)
	return qcc
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (qcc *QRCodeCreate) SetNillableGroupID(i *int) *QRCodeCreate {
	if i != nil {
		qcc.SetGroupID(*i)
	}
	return qcc
}

// AddFileRefIDs adds the "file_refs" edge to the FileReference entity by IDs.
func (qcc *QRCodeCreate) AddFileRefIDs(ids ...int) *QRCodeCreate {
	qcc.mutation.AddFileRefIDs(ids...)
	return qcc
}

// AddFileRefs adds the "file_refs" edges to the FileReference entity.
func (qcc *QRCodeCreate) AddFileRefs(f ...*FileReference) *QRCodeCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return qcc.AddFileRefIDs(ids...)
}

// SetGroup sets the "group" edge to the QRCodeGroup entity.
func (qcc *QRCodeCreate) SetGroup(q *QRCodeGroup) *QRCodeCreate {
	return qcc.SetGroupID(q.ID)
}

// AddAnalyticsRecordIDs adds the "analytics_records" edge to the QRCodeAnalytics entity by IDs.
func (qcc *QRCodeCreate) AddAnalyticsRecordIDs(ids ...int) *QRCodeCreate {
	qcc.mutation.AddAnalyticsRecordIDs(ids...)
	return qcc
}

// AddAnalyticsRecords adds the "analytics_records" edges to the QRCodeAnalytics entity.
func (qcc *QRCodeCreate) AddAnalyticsRecords(q ...*QRCodeAnalytics) *QRCodeCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcc.AddAnalyticsRecordIDs(ids...)
}

// Mutation returns the QRCodeMutation object of the builder.
func (qcc *QRCodeCreate) Mutation() *QRCodeMutation {
	return qcc.mutation
}

// Save creates the QRCode in the database.
func (qcc *QRCodeCreate) Save(ctx context.Context) (*QRCode, error) {
	qcc.defaults()
	return withHooks(ctx, qcc.sqlSave, qcc.mutation, qcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qcc *QRCodeCreate) SaveX(ctx context.Context) *QRCode {
	v, err := qcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcc *QRCodeCreate) Exec(ctx context.Context) error {
	_, err := qcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcc *QRCodeCreate) ExecX(ctx context.Context) {
	if err := qcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcc *QRCodeCreate) defaults() {
	if _, ok := qcc.mutation.CreatedAt(); !ok {
		v := qrcode.DefaultCreatedAt()
		qcc.mutation.SetCreatedAt(v)
	}
	if _, ok := qcc.mutation.UpdatedAt(); !ok {
		v := qrcode.DefaultUpdatedAt()
		qcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := qcc.mutation.Analytics(); !ok {
		v := qrcode.DefaultAnalytics
		qcc.mutation.SetAnalytics(v)
	}
	if _, ok := qcc.mutation.Active(); !ok {
		v := qrcode.DefaultActive
		qcc.mutation.SetActive(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcc *QRCodeCreate) check() error {
	if _, ok := qcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "QRCode.type"`)}
	}
	if v, ok := qcc.mutation.GetType(); ok {
		if err := qrcode.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "QRCode.type": %w`, err)}
		}
	}
	if _, ok := qcc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "QRCode.title"`)}
	}
	if v, ok := qcc.mutation.Title(); ok {
		if err := qrcode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "QRCode.title": %w`, err)}
		}
	}
	if _, ok := qcc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "QRCode.content"`)}
	}
	if _, ok := qcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "QRCode.created_at"`)}
	}
	if _, ok := qcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "QRCode.updated_at"`)}
	}
	if _, ok := qcc.mutation.Analytics(); !ok {
		return &ValidationError{Name: "analytics", err: errors.New(`ent: missing required field "QRCode.analytics"`)}
	}
	if _, ok := qcc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "QRCode.active"`)}
	}
	return nil
}

func (qcc *QRCodeCreate) sqlSave(ctx context.Context) (*QRCode, error) {
	if err := qcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qcc.mutation.id = &_node.ID
	qcc.mutation.done = true
	return _node, nil
}

func (qcc *QRCodeCreate) createSpec() (*QRCode, *sqlgraph.CreateSpec) {
	var (
		_node = &QRCode{config: qcc.config}
		_spec = sqlgraph.NewCreateSpec(qrcode.Table, sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt))
	)
	if value, ok := qcc.mutation.GetType(); ok {
		_spec.SetField(qrcode.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := qcc.mutation.Title(); ok {
		_spec.SetField(qrcode.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := qcc.mutation.Description(); ok {
		_spec.SetField(qrcode.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := qcc.mutation.RedirectURL(); ok {
		_spec.SetField(qrcode.FieldRedirectURL, field.TypeString, value)
		_node.RedirectURL = value
	}
	if value, ok := qcc.mutation.ShortURL(); ok {
		_spec.SetField(qrcode.FieldShortURL, field.TypeString, value)
		_node.ShortURL = value
	}
	if value, ok := qcc.mutation.Content(); ok {
		_spec.SetField(qrcode.FieldContent, field.TypeJSON, value)
		_node.Content = value
	}
	if value, ok := qcc.mutation.CreatedAt(); ok {
		_spec.SetField(qrcode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qcc.mutation.UpdatedAt(); ok {
		_spec.SetField(qrcode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qcc.mutation.ExpiresAt(); ok {
		_spec.SetField(qrcode.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := qcc.mutation.Analytics(); ok {
		_spec.SetField(qrcode.FieldAnalytics, field.TypeBool, value)
		_node.Analytics = value
	}
	if value, ok := qcc.mutation.Active(); ok {
		_spec.SetField(qrcode.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := qcc.mutation.Tags(); ok {
		_spec.SetField(qrcode.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := qcc.mutation.Design(); ok {
		_spec.SetField(qrcode.FieldDesign, field.TypeJSON, value)
		_node.Design = value
	}
	if nodes := qcc.mutation.FileRefsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.FileRefsTable,
			Columns: []string{qrcode.FileRefsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filereference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qcc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcode.GroupTable,
			Columns: []string{qrcode.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodegroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qcc.mutation.AnalyticsRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcode.AnalyticsRecordsTable,
			Columns: []string{qrcode.AnalyticsRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QRCodeCreateBulk is the builder for creating many QRCode entities in bulk.
type QRCodeCreateBulk struct {
	config
	err      error
	builders []*QRCodeCreate
}

// Save creates the QRCode entities in the database.
func (qccb *QRCodeCreateBulk) Save(ctx context.Context) ([]*QRCode, error) {
	if qccb.err != nil {
		return nil, qccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qccb.builders))
	nodes := make([]*QRCode, len(qccb.builders))
	mutators := make([]Mutator, len(qccb.builders))
	for i := range qccb.builders {
		func(i int, root context.Context) {
			builder := qccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QRCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qccb *QRCodeCreateBulk) SaveX(ctx context.Context) []*QRCode {
	v, err := qccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qccb *QRCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := qccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qccb *QRCodeCreateBulk) ExecX(ctx context.Context) {
	if err := qccb.Exec(ctx); err != nil {
		panic(err)
	}
}

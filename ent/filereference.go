// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"qr_backend/ent/filereference"
	"qr_backend/ent/qrcode"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FileReference is the model entity for the FileReference schema.
type FileReference struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Size holds the value of the "size" field.
	Size int64 `json:"size,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileReferenceQuery when eager-loading is set.
	Edges             FileReferenceEdges `json:"edges"`
	qr_code_file_refs *int
	selectValues      sql.SelectValues
}

// FileReferenceEdges holds the relations/edges for other nodes in the graph.
type FileReferenceEdges struct {
	// QrCode holds the value of the qr_code edge.
	QrCode *QRCode `json:"qr_code,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QrCodeOrErr returns the QrCode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileReferenceEdges) QrCodeOrErr() (*QRCode, error) {
	if e.QrCode != nil {
		return e.QrCode, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: qrcode.Label}
	}
	return nil, &NotLoadedError{edge: "qr_code"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileReference) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filereference.FieldID, filereference.FieldSize:
			values[i] = new(sql.NullInt64)
		case filereference.FieldFilename, filereference.FieldURL, filereference.FieldType:
			values[i] = new(sql.NullString)
		case filereference.ForeignKeys[0]: // qr_code_file_refs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileReference fields.
func (fr *FileReference) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filereference.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fr.ID = int(value.Int64)
		case filereference.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				fr.Filename = value.String
			}
		case filereference.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				fr.URL = value.String
			}
		case filereference.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				fr.Size = value.Int64
			}
		case filereference.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				fr.Type = value.String
			}
		case filereference.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field qr_code_file_refs", value)
			} else if value.Valid {
				fr.qr_code_file_refs = new(int)
				*fr.qr_code_file_refs = int(value.Int64)
			}
		default:
			fr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileReference.
// This includes values selected through modifiers, order, etc.
func (fr *FileReference) Value(name string) (ent.Value, error) {
	return fr.selectValues.Get(name)
}

// QueryQrCode queries the "qr_code" edge of the FileReference entity.
func (fr *FileReference) QueryQrCode() *QRCodeQuery {
	return NewFileReferenceClient(fr.config).QueryQrCode(fr)
}

// Update returns a builder for updating this FileReference.
// Note that you need to call FileReference.Unwrap() before calling this method if this FileReference
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FileReference) Update() *FileReferenceUpdateOne {
	return NewFileReferenceClient(fr.config).UpdateOne(fr)
}

// Unwrap unwraps the FileReference entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FileReference) Unwrap() *FileReference {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileReference is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FileReference) String() string {
	var builder strings.Builder
	builder.WriteString("FileReference(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("filename=")
	builder.WriteString(fr.Filename)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(fr.URL)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", fr.Size))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fr.Type)
	builder.WriteByte(')')
	return builder.String()
}

// FileReferences is a parsable slice of FileReference.
type FileReferences []*FileReference

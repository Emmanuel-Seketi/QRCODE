// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qr_backend/ent/qrcode"
	"qr_backend/ent/qrcodeanalytics"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QRCodeAnalyticsCreate is the builder for creating a QRCodeAnalytics entity.
type QRCodeAnalyticsCreate struct {
	config
	mutation *QRCodeAnalyticsMutation
	hooks    []Hook
}

// SetIPAddress sets the "ip_address" field.
func (qcac *QRCodeAnalyticsCreate) SetIPAddress(s string) *QRCodeAnalyticsCreate {
	qcac.mutation.SetIPAddress(s)
	return qcac
}

// SetUserAgent sets the "user_agent" field.
func (qcac *QRCodeAnalyticsCreate) SetUserAgent(s string) *QRCodeAnalyticsCreate {
	qcac.mutation.SetUserAgent(s)
	return qcac
}

// SetLocation sets the "location" field.
func (qcac *QRCodeAnalyticsCreate) SetLocation(s string) *QRCodeAnalyticsCreate {
	qcac.mutation.SetLocation(s)
	return qcac
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (qcac *QRCodeAnalyticsCreate) SetNillableLocation(s *string) *QRCodeAnalyticsCreate {
	if s != nil {
		qcac.SetLocation(*s)
	}
	return qcac
}

// SetDevice sets the "device" field.
func (qcac *QRCodeAnalyticsCreate) SetDevice(s string) *QRCodeAnalyticsCreate {
	qcac.mutation.SetDevice(s)
	return qcac
}

// SetNillableDevice sets the "device" field if the given value is not nil.
func (qcac *QRCodeAnalyticsCreate) SetNillableDevice(s *string) *QRCodeAnalyticsCreate {
	if s != nil {
		qcac.SetDevice(*s)
	}
	return qcac
}

// SetScannedAt sets the "scanned_at" field.
func (qcac *QRCodeAnalyticsCreate) SetScannedAt(t time.Time) *QRCodeAnalyticsCreate {
	qcac.mutation.SetScannedAt(t)
	return qcac
}

// SetNillableScannedAt sets the "scanned_at" field if the given value is not nil.
func (qcac *QRCodeAnalyticsCreate) SetNillableScannedAt(t *time.Time) *QRCodeAnalyticsCreate {
	if t != nil {
		qcac.SetScannedAt(*t)
	}
	return qcac
}

// SetQrCodeID sets the "qr_code" edge to the QRCode entity by ID.
func (qcac *QRCodeAnalyticsCreate) SetQrCodeID(id int) *QRCodeAnalyticsCreate {
	qcac.mutation.SetQrCodeID(id)
	return qcac
}

// SetNillableQrCodeID sets the "qr_code" edge to the QRCode entity by ID if the given value is not nil.
func (qcac *QRCodeAnalyticsCreate) SetNillableQrCodeID(id *int) *QRCodeAnalyticsCreate {
	if id != nil {
		qcac = qcac.SetQrCodeID(*id)
	}
	return qcac
}

// SetQrCode sets the "qr_code" edge to the QRCode entity.
func (qcac *QRCodeAnalyticsCreate) SetQrCode(q *QRCode) *QRCodeAnalyticsCreate {
	return qcac.SetQrCodeID(q.ID)
}

// Mutation returns the QRCodeAnalyticsMutation object of the builder.
func (qcac *QRCodeAnalyticsCreate) Mutation() *QRCodeAnalyticsMutation {
	return qcac.mutation
}

// Save creates the QRCodeAnalytics in the database.
func (qcac *QRCodeAnalyticsCreate) Save(ctx context.Context) (*QRCodeAnalytics, error) {
	qcac.defaults()
	return withHooks(ctx, qcac.sqlSave, qcac.mutation, qcac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qcac *QRCodeAnalyticsCreate) SaveX(ctx context.Context) *QRCodeAnalytics {
	v, err := qcac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcac *QRCodeAnalyticsCreate) Exec(ctx context.Context) error {
	_, err := qcac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcac *QRCodeAnalyticsCreate) ExecX(ctx context.Context) {
	if err := qcac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcac *QRCodeAnalyticsCreate) defaults() {
	if _, ok := qcac.mutation.ScannedAt(); !ok {
		v := qrcodeanalytics.DefaultScannedAt()
		qcac.mutation.SetScannedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcac *QRCodeAnalyticsCreate) check() error {
	if _, ok := qcac.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "QRCodeAnalytics.ip_address"`)}
	}
	if _, ok := qcac.mutation.UserAgent(); !ok {
		return &ValidationError{Name: "user_agent", err: errors.New(`ent: missing required field "QRCodeAnalytics.user_agent"`)}
	}
	if _, ok := qcac.mutation.ScannedAt(); !ok {
		return &ValidationError{Name: "scanned_at", err: errors.New(`ent: missing required field "QRCodeAnalytics.scanned_at"`)}
	}
	return nil
}

func (qcac *QRCodeAnalyticsCreate) sqlSave(ctx context.Context) (*QRCodeAnalytics, error) {
	if err := qcac.check(); err != nil {
		return nil, err
	}
	_node, _spec := qcac.createSpec()
	if err := sqlgraph.CreateNode(ctx, qcac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qcac.mutation.id = &_node.ID
	qcac.mutation.done = true
	return _node, nil
}

func (qcac *QRCodeAnalyticsCreate) createSpec() (*QRCodeAnalytics, *sqlgraph.CreateSpec) {
	var (
		_node = &QRCodeAnalytics{config: qcac.config}
		_spec = sqlgraph.NewCreateSpec(qrcodeanalytics.Table, sqlgraph.NewFieldSpec(qrcodeanalytics.FieldID, field.TypeInt))
	)
	if value, ok := qcac.mutation.IPAddress(); ok {
		_spec.SetField(qrcodeanalytics.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := qcac.mutation.UserAgent(); ok {
		_spec.SetField(qrcodeanalytics.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := qcac.mutation.Location(); ok {
		_spec.SetField(qrcodeanalytics.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := qcac.mutation.Device(); ok {
		_spec.SetField(qrcodeanalytics.FieldDevice, field.TypeString, value)
		_node.Device = value
	}
	if value, ok := qcac.mutation.ScannedAt(); ok {
		_spec.SetField(qrcodeanalytics.FieldScannedAt, field.TypeTime, value)
		_node.ScannedAt = value
	}
	if nodes := qcac.mutation.QrCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   qrcodeanalytics.QrCodeTable,
			Columns: []string{qrcodeanalytics.QrCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.qr_code_analytics_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QRCodeAnalyticsCreateBulk is the builder for creating many QRCodeAnalytics entities in bulk.
type QRCodeAnalyticsCreateBulk struct {
	config
	err      error
	builders []*QRCodeAnalyticsCreate
}

// Save creates the QRCodeAnalytics entities in the database.
func (qcacb *QRCodeAnalyticsCreateBulk) Save(ctx context.Context) ([]*QRCodeAnalytics, error) {
	if qcacb.err != nil {
		return nil, qcacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcacb.builders))
	nodes := make([]*QRCodeAnalytics, len(qcacb.builders))
	mutators := make([]Mutator, len(qcacb.builders))
	for i := range qcacb.builders {
		func(i int, root context.Context) {
			builder := qcacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QRCodeAnalyticsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcacb *QRCodeAnalyticsCreateBulk) SaveX(ctx context.Context) []*QRCodeAnalytics {
	v, err := qcacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcacb *QRCodeAnalyticsCreateBulk) Exec(ctx context.Context) error {
	_, err := qcacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcacb *QRCodeAnalyticsCreateBulk) ExecX(ctx context.Context) {
	if err := qcacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"qr_backend/ent/predicate"
	"qr_backend/ent/qrcode"
	"qr_backend/ent/qrcodegroup"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QRCodeGroupUpdate is the builder for updating QRCodeGroup entities.
type QRCodeGroupUpdate struct {
	config
	hooks    []Hook
	mutation *QRCodeGroupMutation
}

// Where appends a list predicates to the QRCodeGroupUpdate builder.
func (qcgu *QRCodeGroupUpdate) Where(ps ...predicate.QRCodeGroup) *QRCodeGroupUpdate {
	qcgu.mutation.Where(ps...)
	return qcgu
}

// SetName sets the "name" field.
func (qcgu *QRCodeGroupUpdate) SetName(s string) *QRCodeGroupUpdate {
	qcgu.mutation.SetName(s)
	return qcgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (qcgu *QRCodeGroupUpdate) SetNillableName(s *string) *QRCodeGroupUpdate {
	if s != nil {
		qcgu.SetName(*s)
	}
	return qcgu
}

// SetDescription sets the "description" field.
func (qcgu *QRCodeGroupUpdate) SetDescription(s string) *QRCodeGroupUpdate {
	qcgu.mutation.SetDescription(s)
	return qcgu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcgu *QRCodeGroupUpdate) SetNillableDescription(s *string) *QRCodeGroupUpdate {
	if s != nil {
		qcgu.SetDescription(*s)
	}
	return qcgu
}

// ClearDescription clears the value of the "description" field.
func (qcgu *QRCodeGroupUpdate) ClearDescription() *QRCodeGroupUpdate {
	qcgu.mutation.ClearDescription()
	return qcgu
}

// SetCreatedAt sets the "created_at" field.
func (qcgu *QRCodeGroupUpdate) SetCreatedAt(t time.Time) *QRCodeGroupUpdate {
	qcgu.mutation.SetCreatedAt(t)
	return qcgu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qcgu *QRCodeGroupUpdate) SetNillableCreatedAt(t *time.Time) *QRCodeGroupUpdate {
	if t != nil {
		qcgu.SetCreatedAt(*t)
	}
	return qcgu
}

// SetUpdatedAt sets the "updated_at" field.
func (qcgu *QRCodeGroupUpdate) SetUpdatedAt(t time.Time) *QRCodeGroupUpdate {
	qcgu.mutation.SetUpdatedAt(t)
	return qcgu
}

// AddQrcodeIDs adds the "qrcodes" edge to the QRCode entity by IDs.
func (qcgu *QRCodeGroupUpdate) AddQrcodeIDs(ids ...int) *QRCodeGroupUpdate {
	qcgu.mutation.AddQrcodeIDs(ids...)
	return qcgu
}

// AddQrcodes adds the "qrcodes" edges to the QRCode entity.
func (qcgu *QRCodeGroupUpdate) AddQrcodes(q ...*QRCode) *QRCodeGroupUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcgu.AddQrcodeIDs(ids...)
}

// Mutation returns the QRCodeGroupMutation object of the builder.
func (qcgu *QRCodeGroupUpdate) Mutation() *QRCodeGroupMutation {
	return qcgu.mutation
}

// ClearQrcodes clears all "qrcodes" edges to the QRCode entity.
func (qcgu *QRCodeGroupUpdate) ClearQrcodes() *QRCodeGroupUpdate {
	qcgu.mutation.ClearQrcodes()
	return qcgu
}

// RemoveQrcodeIDs removes the "qrcodes" edge to QRCode entities by IDs.
func (qcgu *QRCodeGroupUpdate) RemoveQrcodeIDs(ids ...int) *QRCodeGroupUpdate {
	qcgu.mutation.RemoveQrcodeIDs(ids...)
	return qcgu
}

// RemoveQrcodes removes "qrcodes" edges to QRCode entities.
func (qcgu *QRCodeGroupUpdate) RemoveQrcodes(q ...*QRCode) *QRCodeGroupUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcgu.RemoveQrcodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qcgu *QRCodeGroupUpdate) Save(ctx context.Context) (int, error) {
	qcgu.defaults()
	return withHooks(ctx, qcgu.sqlSave, qcgu.mutation, qcgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcgu *QRCodeGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := qcgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qcgu *QRCodeGroupUpdate) Exec(ctx context.Context) error {
	_, err := qcgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcgu *QRCodeGroupUpdate) ExecX(ctx context.Context) {
	if err := qcgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcgu *QRCodeGroupUpdate) defaults() {
	if _, ok := qcgu.mutation.UpdatedAt(); !ok {
		v := qrcodegroup.UpdateDefaultUpdatedAt()
		qcgu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcgu *QRCodeGroupUpdate) check() error {
	if v, ok := qcgu.mutation.Name(); ok {
		if err := qrcodegroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "QRCodeGroup.name": %w`, err)}
		}
	}
	return nil
}

func (qcgu *QRCodeGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qcgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(qrcodegroup.Table, qrcodegroup.Columns, sqlgraph.NewFieldSpec(qrcodegroup.FieldID, field.TypeInt))
	if ps := qcgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcgu.mutation.Name(); ok {
		_spec.SetField(qrcodegroup.FieldName, field.TypeString, value)
	}
	if value, ok := qcgu.mutation.Description(); ok {
		_spec.SetField(qrcodegroup.FieldDescription, field.TypeString, value)
	}
	if qcgu.mutation.DescriptionCleared() {
		_spec.ClearField(qrcodegroup.FieldDescription, field.TypeString)
	}
	if value, ok := qcgu.mutation.CreatedAt(); ok {
		_spec.SetField(qrcodegroup.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qcgu.mutation.UpdatedAt(); ok {
		_spec.SetField(qrcodegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if qcgu.mutation.QrcodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcodegroup.QrcodesTable,
			Columns: []string{qrcodegroup.QrcodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcgu.mutation.RemovedQrcodesIDs(); len(nodes) > 0 && !qcgu.mutation.QrcodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcodegroup.QrcodesTable,
			Columns: []string{qrcodegroup.QrcodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcgu.mutation.QrcodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcodegroup.QrcodesTable,
			Columns: []string{qrcodegroup.QrcodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qcgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrcodegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qcgu.mutation.done = true
	return n, nil
}

// QRCodeGroupUpdateOne is the builder for updating a single QRCodeGroup entity.
type QRCodeGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QRCodeGroupMutation
}

// SetName sets the "name" field.
func (qcguo *QRCodeGroupUpdateOne) SetName(s string) *QRCodeGroupUpdateOne {
	qcguo.mutation.SetName(s)
	return qcguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (qcguo *QRCodeGroupUpdateOne) SetNillableName(s *string) *QRCodeGroupUpdateOne {
	if s != nil {
		qcguo.SetName(*s)
	}
	return qcguo
}

// SetDescription sets the "description" field.
func (qcguo *QRCodeGroupUpdateOne) SetDescription(s string) *QRCodeGroupUpdateOne {
	qcguo.mutation.SetDescription(s)
	return qcguo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (qcguo *QRCodeGroupUpdateOne) SetNillableDescription(s *string) *QRCodeGroupUpdateOne {
	if s != nil {
		qcguo.SetDescription(*s)
	}
	return qcguo
}

// ClearDescription clears the value of the "description" field.
func (qcguo *QRCodeGroupUpdateOne) ClearDescription() *QRCodeGroupUpdateOne {
	qcguo.mutation.ClearDescription()
	return qcguo
}

// SetCreatedAt sets the "created_at" field.
func (qcguo *QRCodeGroupUpdateOne) SetCreatedAt(t time.Time) *QRCodeGroupUpdateOne {
	qcguo.mutation.SetCreatedAt(t)
	return qcguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qcguo *QRCodeGroupUpdateOne) SetNillableCreatedAt(t *time.Time) *QRCodeGroupUpdateOne {
	if t != nil {
		qcguo.SetCreatedAt(*t)
	}
	return qcguo
}

// SetUpdatedAt sets the "updated_at" field.
func (qcguo *QRCodeGroupUpdateOne) SetUpdatedAt(t time.Time) *QRCodeGroupUpdateOne {
	qcguo.mutation.SetUpdatedAt(t)
	return qcguo
}

// AddQrcodeIDs adds the "qrcodes" edge to the QRCode entity by IDs.
func (qcguo *QRCodeGroupUpdateOne) AddQrcodeIDs(ids ...int) *QRCodeGroupUpdateOne {
	qcguo.mutation.AddQrcodeIDs(ids...)
	return qcguo
}

// AddQrcodes adds the "qrcodes" edges to the QRCode entity.
func (qcguo *QRCodeGroupUpdateOne) AddQrcodes(q ...*QRCode) *QRCodeGroupUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcguo.AddQrcodeIDs(ids...)
}

// Mutation returns the QRCodeGroupMutation object of the builder.
func (qcguo *QRCodeGroupUpdateOne) Mutation() *QRCodeGroupMutation {
	return qcguo.mutation
}

// ClearQrcodes clears all "qrcodes" edges to the QRCode entity.
func (qcguo *QRCodeGroupUpdateOne) ClearQrcodes() *QRCodeGroupUpdateOne {
	qcguo.mutation.ClearQrcodes()
	return qcguo
}

// RemoveQrcodeIDs removes the "qrcodes" edge to QRCode entities by IDs.
func (qcguo *QRCodeGroupUpdateOne) RemoveQrcodeIDs(ids ...int) *QRCodeGroupUpdateOne {
	qcguo.mutation.RemoveQrcodeIDs(ids...)
	return qcguo
}

// RemoveQrcodes removes "qrcodes" edges to QRCode entities.
func (qcguo *QRCodeGroupUpdateOne) RemoveQrcodes(q ...*QRCode) *QRCodeGroupUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcguo.RemoveQrcodeIDs(ids...)
}

// Where appends a list predicates to the QRCodeGroupUpdate builder.
func (qcguo *QRCodeGroupUpdateOne) Where(ps ...predicate.QRCodeGroup) *QRCodeGroupUpdateOne {
	qcguo.mutation.Where(ps...)
	return qcguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qcguo *QRCodeGroupUpdateOne) Select(field string, fields ...string) *QRCodeGroupUpdateOne {
	qcguo.fields = append([]string{field}, fields...)
	return qcguo
}

// Save executes the query and returns the updated QRCodeGroup entity.
func (qcguo *QRCodeGroupUpdateOne) Save(ctx context.Context) (*QRCodeGroup, error) {
	qcguo.defaults()
	return withHooks(ctx, qcguo.sqlSave, qcguo.mutation, qcguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcguo *QRCodeGroupUpdateOne) SaveX(ctx context.Context) *QRCodeGroup {
	node, err := qcguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qcguo *QRCodeGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := qcguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcguo *QRCodeGroupUpdateOne) ExecX(ctx context.Context) {
	if err := qcguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcguo *QRCodeGroupUpdateOne) defaults() {
	if _, ok := qcguo.mutation.UpdatedAt(); !ok {
		v := qrcodegroup.UpdateDefaultUpdatedAt()
		qcguo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qcguo *QRCodeGroupUpdateOne) check() error {
	if v, ok := qcguo.mutation.Name(); ok {
		if err := qrcodegroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "QRCodeGroup.name": %w`, err)}
		}
	}
	return nil
}

func (qcguo *QRCodeGroupUpdateOne) sqlSave(ctx context.Context) (_node *QRCodeGroup, err error) {
	if err := qcguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(qrcodegroup.Table, qrcodegroup.Columns, sqlgraph.NewFieldSpec(qrcodegroup.FieldID, field.TypeInt))
	id, ok := qcguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QRCodeGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qcguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, qrcodegroup.FieldID)
		for _, f := range fields {
			if !qrcodegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != qrcodegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qcguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcguo.mutation.Name(); ok {
		_spec.SetField(qrcodegroup.FieldName, field.TypeString, value)
	}
	if value, ok := qcguo.mutation.Description(); ok {
		_spec.SetField(qrcodegroup.FieldDescription, field.TypeString, value)
	}
	if qcguo.mutation.DescriptionCleared() {
		_spec.ClearField(qrcodegroup.FieldDescription, field.TypeString)
	}
	if value, ok := qcguo.mutation.CreatedAt(); ok {
		_spec.SetField(qrcodegroup.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qcguo.mutation.UpdatedAt(); ok {
		_spec.SetField(qrcodegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if qcguo.mutation.QrcodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcodegroup.QrcodesTable,
			Columns: []string{qrcodegroup.QrcodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcguo.mutation.RemovedQrcodesIDs(); len(nodes) > 0 && !qcguo.mutation.QrcodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcodegroup.QrcodesTable,
			Columns: []string{qrcodegroup.QrcodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcguo.mutation.QrcodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   qrcodegroup.QrcodesTable,
			Columns: []string{qrcodegroup.QrcodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(qrcode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QRCodeGroup{config: qcguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qcguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{qrcodegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qcguo.mutation.done = true
	return _node, nil
}
